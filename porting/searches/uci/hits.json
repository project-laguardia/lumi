{
  "luci/applications/luci-app-acl/htdocs/luci-static/resources/view/system/acl.js": {
    "6": "'require uci';",
    "13": "var list = L.toArray(uci.get('rpcd', section_id, option)),",
    "18": "list.push.apply(list, L.toArray(uci.get('rpcd', section_id, 'write')));",
    "149": "uci.unset('rpcd', section_id, 'read');",
    "150": "uci.unset('rpcd', section_id, 'write');",
    "153": "uci.set('rpcd', section_id, 'read', value.read);",
    "156": "uci.set('rpcd', section_id, 'write', value.write);",
    "212": "return _('LuCI Logins') + ' Â» ' + (uci.get('rpcd', section_id, 'username') || _('New account'));",
    "223": "var value = uci.get('rpcd', section_id, 'password') || '';",
    "236": "var value = uci.get('rpcd', section_id, 'password') || '';",
    "240": "uci.set('rpcd', section_id, 'password', '$p$' + value);",
    "250": "var value = uci.get('rpcd', section_id, 'password') || '';",
    "277": "uci.set('rpcd', section_id, 'password', res.stdout.trim());",
    "284": "uci.set('rpcd', section_id, 'password', value);",
    "292": "var value = uci.get('rpcd', section_id, 'timeout') || this.default;",
    "308": "var readList = L.toArray(uci.get('rpcd', section_id, 'read')),",
    "309": "writeList = L.toArray(uci.get('rpcd', section_id, 'write'));",
    "321": "uci.set('rpcd', section_id, 'read', ['*']);",
    "322": "uci.set('rpcd', section_id, 'write', ['*']);",
    "326": "uci.set('rpcd', section_id, 'read', ['*']);",
    "327": "uci.unset('rpcd', section_id, 'write');"
  },
  "luci/applications/luci-app-acme/htdocs/luci-static/resources/view/acme.js": {
    "4": "'require uci';",
    "491": "let keylength = uci.get('acme', section_id, 'keylength');",
    "507": "uci.unset('acme', section_id, 'keylength');",
    "508": "uci.set('acme', section_id, 'key_type', value);"
  },
  "luci/applications/luci-app-adblock/htdocs/luci-static/resources/view/adblock/dnsreport.js": {
    "5": "'require uci';",
    "242": "uci.load('adblock')",
    "421": "if (uci.get('adblock', 'global', 'adb_map') === '1') {"
  },
  "luci/applications/luci-app-adblock/htdocs/luci-static/resources/view/adblock/feeds.js": {
    "194": "o.ucioption = '.name';"
  },
  "luci/applications/luci-app-adblock/htdocs/luci-static/resources/view/adblock/overview.js": {
    "7": "'require uci';",
    "47": "uci.load('adblock')"
  },
  "luci/applications/luci-app-adblock-fast/htdocs/luci-static/resources/view/adblock-fast/overview.js": {
    "18": "L.resolveDefault(L.uci.load(pkg.Name), {}),",
    "19": "L.resolveDefault(L.uci.load(\"dhcp\"), {}),",
    "20": "L.resolveDefault(L.uci.load(\"smartdns\"), {}),",
    "210": "L.uci.set(pkg.Name, section_id, \"dnsmasq_instance\", formvalue);",
    "219": "Object.values(L.uci.sections(\"dhcp\", \"dnsmasq\")).forEach(function (",
    "224": "if (element[\".name\"] === L.uci.resolveSID(\"dhcp\", element[\".name\"])) {",
    "273": "L.uci.set(pkg.Name, section_id, \"smartdns_instance\", formvalue);",
    "282": "Object.values(L.uci.sections(\"smartdns\", \"smartdns\")).forEach(function (",
    "288": "element[\".name\"] === L.uci.resolveSID(\"smartdns\", element[\".name\"])",
    "407": "\"Launch all lists downloads and processing simultaneously, reducing service start time.\"",
    "492": "let url = L.uci.get(pkg.Name, section_id, \"url\");",
    "518": "let name = L.uci.get(pkg.Name, section_id, \"name\");",
    "519": "let url = L.uci.get(pkg.Name, section_id, \"url\");"
  },
  "luci/applications/luci-app-advanced-reboot/htdocs/luci-static/resources/view/system/advanced_reboot.js": {
    "5": "'require uci';",
    "181": "uci.changes(),"
  },
  "luci/applications/luci-app-antiblock/htdocs/luci-static/resources/view/antiblock/domains.js": {
    "3": "'require uci';",
    "75": "return await uci.load('antiblock');",
    "78": "const uci_routes = uci.sections('antiblock', 'route');",
    "81": "uci_routes.forEach(function (route) {"
  },
  "luci/applications/luci-app-antiblock/htdocs/luci-static/resources/view/antiblock/log.js": {
    "6": "'require uci';",
    "33": "await uci.load('antiblock');",
    "35": "main_config = uci.sections('antiblock', 'main');"
  },
  "luci/applications/luci-app-antiblock/htdocs/luci-static/resources/view/antiblock/statistics.js": {
    "6": "'require uci';",
    "33": "await uci.load('antiblock');",
    "35": "main_config = uci.sections('antiblock', 'main');"
  },
  "luci/applications/luci-app-apinger/htdocs/luci-static/resources/view/apinger/graphs.js": {
    "3": "'require uci';"
  },
  "luci/applications/luci-app-apinger/htdocs/luci-static/resources/view/apinger/targets.js": {
    "4": "'require uci';",
    "9": "uci.load('apinger'),",
    "17": "a_ifaces = uci.sections('apinger', 'interface');",
    "18": "a_down = uci.sections('apinger', 'alarm_down');",
    "19": "a_delay = uci.sections('apinger', 'alarm_delay');",
    "20": "a_loss = uci.sections('apinger', 'alarm_loss');"
  },
  "luci/applications/luci-app-attendedsysupgrade/htdocs/luci-static/resources/view/attendedsysupgrade/overview.js": {
    "4": "'require uci';",
    "630": "uci.load('attendedsysupgrade'),",
    "633": "url: uci.get_first('attendedsysupgrade', 'server', 'url').replace(/\\/+$/, ''),",
    "637": "advanced_mode: uci.get_first('attendedsysupgrade', 'client', 'advanced_mode') || 0,",
    "638": "rebuilder: uci.get_first('attendedsysupgrade', 'server', 'rebuilder')",
    "652": "rootfs_size_mb: uci.get('attendedsysupgrade', 'owut', 'rootfs_size'),"
  },
  "luci/applications/luci-app-attendedsysupgrade/htdocs/luci-static/resources/view/status/include/11_upgrades.js": {
    "5": "'require uci'",
    "121": "uci.load('luci')",
    "129": "uci.set('luci', 'main', 'check_for_newer_firmwares', pref);",
    "131": "return uci.save()",
    "138": "const check_upgrades = uci.get_bool('luci', 'main', 'check_for_newer_firmwares') ?? false;",
    "174": "const check_upgrades = uci.get_bool('luci', 'main', 'check_for_newer_firmwares') ?? false;"
  },
  "luci/applications/luci-app-babeld/htdocs/luci-static/resources/view/babeld/babeld-view.js": {
    "2": "'require uci';"
  },
  "luci/applications/luci-app-banip/htdocs/luci-static/resources/view/banip/feeds.js": {
    "209": "o.ucioption = '.name';"
  },
  "luci/applications/luci-app-banip/htdocs/luci-static/resources/view/banip/overview.js": {
    "7": "'require uci';",
    "33": "uci.load('banip')",
    "691": "o.datatype = 'uciname';"
  },
  "luci/applications/luci-app-banip/htdocs/luci-static/resources/view/banip/setreport.js": {
    "5": "'require uci';",
    "144": "if (uci.get('banip', 'global', 'ban_nftcount') === '1') {",
    "191": "uci.load('banip')",
    "342": "if (uci.get('banip', 'global', 'ban_nftcount') === '1'",
    "343": "&& uci.get('banip', 'global', 'ban_map') === '1'",
    "344": "&& (uci.get('banip', 'global', 'ban_allowlistonly') !== '1'",
    "345": "|| (uci.get('banip', 'global', 'ban_feedin') || \"\").includes(\"allowlist\")",
    "346": "|| (uci.get('banip', 'global', 'ban_feedout') || \"\").includes(\"allowlist\"))) {"
  },
  "luci/applications/luci-app-bmx7/root/usr/lib/lua/luci/controller/bmx7.lua": {
    "28": "local ucim = require \"luci.model.uci\"",
    "29": "local uci = ucim.cursor()",
    "32": "if uci:get(\"luci-bmx7\",\"luci\",\"ignore\") == \"1\" then",
    "36": "-- getting value from uci database",
    "37": "local uci_place = uci:get(\"luci-bmx7\",\"luci\",\"place\")",
    "40": "if uci_place == nil then",
    "44": "place = util.split(uci_place,\" \")",
    "48": "local uci_position = uci:get(\"luci-bmx7\",\"luci\",\"position\")",
    "56": "entry(place,call(\"action_status_j\"),place[#place],tonumber(uci_position))"
  },
  "luci/applications/luci-app-chrony/htdocs/luci-static/resources/view/chrony.js": {
    "4": "'require uci';"
  },
  "luci/applications/luci-app-clamav/htdocs/luci-static/resources/view/clamav/clamav-milter.js": {
    "4": "'require uci';"
  },
  "luci/applications/luci-app-clamav/htdocs/luci-static/resources/view/clamav/clamav.js": {
    "5": "'require uci';",
    "312": "const logfilename = uci.get('clamav', 'clamav', 'LogFile')"
  },
  "luci/applications/luci-app-clamav/htdocs/luci-static/resources/view/clamav/freshclam.js": {
    "4": "'require uci';"
  },
  "luci/applications/luci-app-csshnpd/htdocs/luci-static/resources/view/sshnpd/enroll.js": {
    "6": "'require uci';",
    "34": "return uci.load('sshnpd').then(function() {",
    "35": "let atsign = uci.get_first('sshnpd','','atsign'),",
    "44": "const atsign = uci.get_first('sshnpd','','atsign');",
    "45": "const device = uci.get_first('sshnpd','','device');",
    "46": "const otp = uci.get_first('sshnpd','','otp');"
  },
  "luci/applications/luci-app-dawn/htdocs/luci-static/resources/view/network/dawn.js": {
    "2": "'require uci';",
    "115": "uci.load('dawn')",
    "121": "uci.get_first('dawn', 'local') != null || uci.add('dawn', 'local');",
    "122": "uci.get_first('dawn', 'hostapd') != null || uci.add('dawn', 'hostapd');",
    "123": "uci.get_first('dawn', 'network') != null || uci.add('dawn', 'network');"
  },
  "luci/applications/luci-app-dawn/htdocs/luci-static/resources/view/status/dawn/hearing_map.js": {
    "2": "'require uci';"
  },
  "luci/applications/luci-app-dawn/htdocs/luci-static/resources/view/status/dawn/network_overview.js": {
    "2": "'require uci';"
  },
  "luci/applications/luci-app-dcwapd/htdocs/luci-static/resources/view/dcwapd/dcwapd.js": {
    "5": "'require uci';",
    "19": "L.resolveDefault(L.uci.load('dcwapd'), {}),",
    "134": "const dataChannels = L.uci.sections('dcwapd', 'datachannel');",
    "200": "const filterSections = L.uci.sections('dcwapd', 'filter');"
  },
  "luci/applications/luci-app-ddns/htdocs/luci-static/resources/view/ddns/overview.js": {
    "6": "'require uci';",
    "221": "cfg_enabled = uci.get('ddns', section_id, 'enabled');",
    "225": "host = uci.get('ddns', section_id, 'lookup_host') || _('Configuration Error');",
    "257": "uci.load('ddns'),",
    "266": "var logdir = uci.get('ddns', 'global', 'ddns_logdir') || \"/var/log/ddns\";",
    "461": "uci.set('ddns', section_id, 'cacert', value.toUpperCase());",
    "484": "uci.add('ddns', 'service', section_id);",
    "486": "uci.set('ddns', section_id, 'service_name', service_value);",
    "488": "uci.set('ddns', section_id, 'use_ipv6', ipv6_value);",
    "501": "this.renderUCISection('_new_')",
    "507": "name.datatype = 'uciname';",
    "510": "if (uci.get('ddns', value) != null)",
    "560": "cfg_enabled = uci.get('ddns', section_id, 'enabled'),",
    "596": "var service = uci.get('ddns', section_id, 'service_name') || '-',",
    "597": "ipv6 = uci.get('ddns', section_id, 'use_ipv6'), service_name, use_ipv6;",
    "658": "return uci.get('ddns', section_id, 'service_name') || '-';",
    "662": "uci.unset('ddns', section_id, 'update_url');",
    "663": "uci.unset('ddns', section_id, 'update_script');",
    "664": "return uci.set('ddns', section_id, 'service_name', service);",
    "666": "return uci.unset('ddns', section_id, 'service_name');",
    "814": "uci.set('ddns', section_id, 'cacert', value.toUpperCase());",
    "831": "uci.unset('ddns', section_id, \"ip_url\");",
    "832": "uci.unset('ddns', section_id, \"ip_interface\");",
    "833": "uci.unset('ddns', section_id, \"ip_script\");",
    "836": "uci.unset('ddns', section_id, \"ip_network\");",
    "837": "uci.unset('ddns', section_id, \"ip_interface\");",
    "838": "uci.unset('ddns', section_id, \"ip_script\");",
    "841": "uci.unset('ddns', section_id, \"ip_network\");",
    "842": "uci.unset('ddns', section_id, \"ip_url\");",
    "843": "uci.unset('ddns', section_id, \"ip_script\");",
    "846": "uci.unset('ddns', section_id, \"ip_network\");",
    "847": "uci.unset('ddns', section_id, \"ip_url\");",
    "848": "uci.unset('ddns', section_id, \"ip_interface\");",
    "854": "return uci.set('ddns', section_id, 'ip_source', formvalue )",
    "907": "return uci.get('ddns', section_id, 'interface') || _('This will be autoset to the selected interface');",
    "912": "return uci.set('ddns', section_id, 'interface', val);",
    "990": "return uci.get('ddns', section_id, 'use_logfile');",
    "1149": "var host = uci.get('ddns', section_id, 'lookup_host') || _('Configuration Error'),"
  },
  "luci/applications/luci-app-ddns/htdocs/luci-static/resources/view/status/include/70_ddns.js": {
    "4": "'require uci';",
    "18": "uci.load('ddns')",
    "39": "uci.get('ddns',key,'lookup_host'),",
    "41": "(uci.get('ddns',key,'use_ipv6') == '1' ? 'IPv6' : 'IPv4') + ' / ' + uci.get('ddns',key,'interface')"
  },
  "luci/applications/luci-app-dockerman/luasrc/controller/dockerman.lua": {
    "18": "local remote = luci.model.uci.cursor():get_bool(\"dockerd\", \"globals\", \"remote_endpoint\")",
    "20": "local host = luci.model.uci.cursor():get(\"dockerd\", \"globals\", \"remote_host\")",
    "21": "local port = luci.model.uci.cursor():get(\"dockerd\", \"globals\", \"remote_port\")",
    "26": "local socket = luci.model.uci.cursor():get(\"dockerd\", \"globals\", \"socket_path\") or \"/var/run/docker.sock\""
  },
  "luci/applications/luci-app-dockerman/luasrc/model/docker.lua": {
    "8": "local uci = (require \"luci.model.uci\").cursor()",
    "278": "local remote = uci:get_bool(\"dockerd\", \"globals\", \"remote_endpoint\")",
    "280": "host = uci:get(\"dockerd\", \"globals\", \"remote_host\") or nil",
    "281": "port = uci:get(\"dockerd\", \"globals\", \"remote_port\") or nil",
    "283": "socket_path = uci:get(\"dockerd\", \"globals\", \"socket_path\") or \"/var/run/docker.sock\"",
    "286": "local debug = uci:get_bool(\"dockerd\", \"globals\", \"debug\")",
    "288": "debug_path = uci:get(\"dockerd\", \"globals\", \"debug_path\") or \"/tmp/.docker_debug\"",
    "291": "local status_path = uci:get(\"dockerd\", \"globals\", \"status_path\") or \"/tmp/.docker_status\"",
    "403": "if uci:get(\"dockerd\", \"globals\", \"remote_endpoint\") == \"true\" then",
    "414": "uci:delete(\"network\", dev_name)",
    "415": "uci:set(\"network\", dev_name, \"device\")",
    "416": "uci:set(\"network\", dev_name, \"name\", dev_name)",
    "417": "uci:set(\"network\", dev_name, \"ifname\", device)",
    "418": "uci:set(\"network\", dev_name, \"type\", \"macvlan\")",
    "419": "uci:set(\"network\", dev_name, \"mode\", \"bridge\")",
    "422": "uci:delete(\"network\", if_name)",
    "423": "uci:set(\"network\", if_name, \"interface\")",
    "424": "uci:set(\"network\", if_name, \"proto\", \"static\")",
    "425": "uci:set(\"network\", if_name, \"ifname\", dev_name)",
    "426": "uci:set(\"network\", if_name, \"ipaddr\", gateway)",
    "427": "uci:set(\"network\", if_name, \"netmask\", net_mask)",
    "428": "uci:foreach(\"firewall\", \"zone\", function(s)",
    "433": "uci:delete(\"firewall\", s[\".name\"], \"network\")",
    "439": "uci:set(\"firewall\", s[\".name\"], \"network\", interfaces)",
    "443": "uci:commit(\"firewall\")",
    "444": "uci:commit(\"network\")",
    "454": "if uci:get(\"dockerd\", \"globals\", \"remote_endpoint\") == \"true\" then",
    "460": "uci:foreach(\"firewall\", \"zone\", function(s)",
    "470": "uci:set(\"firewall\", s[\".name\"], \"network\", interfaces)",
    "474": "uci:delete(\"network\", dev_name)",
    "475": "uci:delete(\"network\", if_name)",
    "476": "uci:commit(\"network\")",
    "477": "uci:commit(\"firewall\")"
  },
  "luci/applications/luci-app-dockerman/luasrc/model/cbi/dockerman/container.lua": {
    "715": "local uci = require \"luci.model.uci\".cursor()",
    "716": "local remote = uci:get_bool(\"dockerd\", \"globals\", \"remote_endpoint\") or false",
    "722": "host = uci:get(\"dockerd\", \"globals\", \"remote_host\") or nil",
    "723": "port = uci:get(\"dockerd\", \"globals\", \"remote_port\") or nil",
    "725": "socket = uci:get(\"dockerd\", \"globals\", \"socket_path\") or \"/var/run/docker.sock\""
  },
  "luci/applications/luci-app-eoip/htdocs/luci-static/resources/view/eoip/eoip.js": {
    "4": "'require uci';",
    "23": "var sections = uci.sections('eoip');",
    "25": "if (uci.get('eoip', sections[i]['.name'], 'name') == value && section_id != sections[i]['.name'])"
  },
  "luci/applications/luci-app-example/htdocs/luci-static/resources/view/example/form.js": {
    "12": "via uci at /etc/config/. In this case, 'example' maps to /etc/config/example.",
    "19": "The relevant ACL path for reading a configuration with UCI this way is",
    "20": "read > uci > [\"example\"]",
    "23": "write > uci > [\"example\"]"
  },
  "luci/applications/luci-app-example/htdocs/luci-static/resources/view/example/htmlview.js": {
    "2": "'require uci';",
    "11": "// The relevant ACL path for reading a configuration with UCI this way is",
    "12": "// read > uci > [\"example\"]",
    "13": "uci.load('example')",
    "20": "var sections = uci.sections('example');"
  },
  "luci/applications/luci-app-example/htdocs/luci-static/resources/view/example/rpc-jsonmap-tablesection.js": {
    "51": "a configuration form. Normally you'd use this with a UCI-powered result,",
    "53": "built-in UCI/ubus libraries."
  },
  "luci/applications/luci-app-example/htdocs/luci-static/resources/view/example/rpc-jsonmap-typedsection.js": {
    "51": "a configuration form. Normally you'd use this with a UCI-powered result,",
    "53": "built-in UCI/ubus libraries."
  },
  "luci/applications/luci-app-firewall/htdocs/luci-static/resources/tools/firewall.js": {
    "5": "'require uci';",
    "646": "var redirects = uci.sections('firewall', 'redirect');",
    "656": "var redirects = uci.sections('firewall', 'redirect'),",
    "672": "var sid = uci.add('firewall', 'nat');",
    "681": "uci.set('firewall', sid, mapping[opt] || opt, redirects[i][opt]);",
    "684": "uci.remove('firewall', redirects[i]['.name']);",
    "687": "return uci.save()"
  },
  "luci/applications/luci-app-firewall/htdocs/luci-static/resources/view/firewall/forwards.js": {
    "5": "'require uci';",
    "12": "var family = (uci.get('firewall', s, 'family') || '').toLowerCase().replace(/^(?:all|\\*)$/, 'any');",
    "13": "var dip = uci.get('firewall', s, 'dest_ip') || '';",
    "14": "var proto = L.toArray(uci.get('firewall', s, 'proto')).filter(function(p) {",
    "21": "types: (pr[0] == 1 || pr[0] == 58) ? L.toArray(uci.get('firewall', s, 'icmp_type')) : null",
    "25": "var m = String(uci.get('firewall', s, 'helper') || '').match(/^(!\\s*)?(\\S+)$/);",
    "32": "m = String(uci.get('firewall', s, 'mark')).match(/^(!\\s*)?(0x[0-9a-f]{1,8}|[0-9]{1,10})(?:\\/(0x[0-9a-f]{1,8}|[0-9]{1,10}))?$/i);",
    "50": "var z = uci.get('firewall', s, 'src');",
    "54": "src_ip: fwtool.map_invert(uci.get('firewall', s, 'src_ip'), 'toLowerCase'),",
    "55": "src_mac: fwtool.map_invert(uci.get('firewall', s, 'src_mac'), 'toUpperCase').map(function(v) { return Object.assign(v, { hint: hosts[v.val] }) }),",
    "56": "src_port: fwtool.map_invert(uci.get('firewall', s, 'src_port'))",
    "63": "dest_ip: fwtool.map_invert(uci.get('firewall', s, 'src_dip'), 'toLowerCase'),",
    "64": "dest_port: fwtool.map_invert(uci.get('firewall', s, 'src_dport'))",
    "69": "var m = String(uci.get('firewall', s, 'limit')).match(/^(\\d+)\\/([smhd])\\w*$/i),",
    "73": "burst: uci.get('firewall', s, 'limit_burst')",
    "83": "var z = uci.get('firewall', s, 'dest');",
    "87": "dest_ip: (uci.get('firewall', s, 'dest_ip') || '').toLowerCase(),",
    "88": "dest_port: uci.get('firewall', s, 'dest_port')",
    "134": "uci.load('firewall')",
    "165": "return (uci.get('firewall', section_id, 'target') != 'SNAT');",
    "169": "return uci.get('firewall', section_id, 'name') || _('Unnamed forward');",
    "173": "var config_name = this.uciconfig || this.map.config,",
    "174": "section_id = uci.add(config_name, this.sectiontype);",
    "176": "uci.set(config_name, section_id, 'dest', 'lan');",
    "177": "uci.set(config_name, section_id, 'target', 'DNAT');",
    "248": "uci.sections('firewall', 'ipset', function(s) {",
    "317": "uci.set('firewall', section_id, 'reflection_src', (value != 'internal') ? value : null);"
  },
  "luci/applications/luci-app-firewall/htdocs/luci-static/resources/view/firewall/ipsets.js": {
    "3": "'require uci';",
    "13": "uci.load('firewall')",
    "142": "uci enforces a datatype = cidr in order to be able to enter"
  },
  "luci/applications/luci-app-firewall/htdocs/luci-static/resources/view/firewall/rules.js": {
    "5": "'require uci';",
    "12": "var f = (uci.get('firewall', s, 'family') || '').toLowerCase().replace(/^(?:any|\\*)$/, '');",
    "14": "var proto = L.toArray(uci.get('firewall', s, 'proto')).filter(function(p) {",
    "21": "types: (pr[0] == 1 || pr[0] == 58) ? L.toArray(uci.get('firewall', s, 'icmp_type')) : null",
    "25": "var m = String(uci.get('firewall', s, 'helper') || '').match(/^(!\\s*)?(\\S+)$/);",
    "32": "m = String(uci.get('firewall', s, 'mark')).match(/^(!\\s*)?(0x[0-9a-f]{1,8}|[0-9]{1,10})(?:\\/(0x[0-9a-f]{1,8}|[0-9]{1,10}))?$/i);",
    "40": "m = String(uci.get('firewall', s, 'dscp')).match(/^(!\\s*)?(?:(CS[0-7]|BE|AF[1234][123]|EF)|(0x[0-9a-f]{1,2}|[0-9]{1,2}))$/);",
    "51": "src:  uci.get('firewall', s, 'src'),",
    "52": "dest: uci.get('firewall', s, 'dest'),",
    "61": "var z = uci.get('firewall', s, 'src'),",
    "62": "d = (uci.get('firewall', s, 'direction') == 'in') ? uci.get('firewall', s, 'device') : null;",
    "66": "src_ip: fwtool.map_invert(uci.get('firewall', s, 'src_ip'), 'toLowerCase'),",
    "67": "src_mac: fwtool.map_invert(uci.get('firewall', s, 'src_mac'), 'toUpperCase').map(function(v) { return Object.assign(v, { hint: hosts[v.val] }) }),",
    "68": "src_port: fwtool.map_invert(uci.get('firewall', s, 'src_port')),",
    "74": "var z = uci.get('firewall', s, 'dest'),",
    "75": "d = (uci.get('firewall', s, 'direction') == 'out') ? uci.get('firewall', s, 'device') : null;",
    "79": "dest_ip: fwtool.map_invert(uci.get('firewall', s, 'dest_ip'), 'toLowerCase'),",
    "80": "dest_port: fwtool.map_invert(uci.get('firewall', s, 'dest_port')),",
    "86": "var m = String(uci.get('firewall', s, 'limit')).match(/^(\\d+)\\/([smhd])\\w*$/i),",
    "90": "burst: uci.get('firewall', s, 'limit_burst')",
    "100": "var t = uci.get('firewall', s, 'target'),",
    "101": "h = (uci.get('firewall', s, 'set_helper') || '').toUpperCase(),",
    "104": "src:    uci.get('firewall', s, 'src'),",
    "105": "dest:   uci.get('firewall', s, 'dest'),",
    "107": "set_mark:   uci.get('firewall', s, 'set_mark'),",
    "108": "set_xmark:  uci.get('firewall', s, 'set_xmark'),",
    "109": "set_dscp:   uci.get('firewall', s, 'set_dscp'),",
    "157": "uci.load('firewall')",
    "187": "return (uci.get('firewall', section_id, 'target') != 'SNAT');",
    "191": "return uci.get('firewall', section_id, 'name') || _('Unnamed rule');",
    "195": "const config_name = this.uciconfig || this.map.config;",
    "196": "const section_id = uci.add(config_name, this.sectiontype);",
    "198": "uci.set(config_name, section_id, 'src', 'wan');",
    "199": "uci.set(config_name, section_id, 'dest', 'lan');",
    "231": "var weekdays = uci.get('firewall', section_id, 'weekdays');",
    "232": "var monthdays = uci.get('firewall', section_id, 'monthdays');",
    "233": "var start_time = uci.get('firewall', section_id, 'start_time');",
    "234": "var stop_time = uci.get('firewall', section_id, 'stop_time');",
    "235": "var start_date = uci.get('firewall', section_id, 'start_date');",
    "236": "var stop_date = uci.get('firewall', section_id, 'stop_date');",
    "250": "var val = uci.get('firewall', section_id, 'direction');",
    "374": "uci.sections('firewall', 'ipset', function(s) {",
    "418": "var t = uci.get('firewall', section_id, 'target'),",
    "419": "m = uci.get('firewall', section_id, 'set_mark');"
  },
  "luci/applications/luci-app-firewall/htdocs/luci-static/resources/view/firewall/snats.js": {
    "5": "'require uci';",
    "12": "var family = (uci.get('firewall', s, 'family') || '').toLowerCase().replace(/^(?:all|\\*)$/, 'any');",
    "13": "var sip = uci.get('firewall', s, 'src_ip') || '';",
    "14": "var dip = uci.get('firewall', s, 'dest_ip') || '';",
    "15": "var rwip = uci.get('firewall', s, 'snat_ip') || '';",
    "16": "var proto = L.toArray(uci.get('firewall', s, 'proto')).filter(function(p) {",
    "26": "var m = String(uci.get('firewall', s, 'mark')).match(/^(!\\s*)?(0x[0-9a-f]{1,8}|[0-9]{1,10})(?:\\/(0x[0-9a-f]{1,8}|[0-9]{1,10}))?$/i);",
    "43": "var z = uci.get('firewall', s, 'src');",
    "47": "src_ip: fwtool.map_invert(uci.get('firewall', s, 'src_ip'), 'toLowerCase'),",
    "48": "src_port: fwtool.map_invert(uci.get('firewall', s, 'src_port'))",
    "53": "var z = uci.get('firewall', s, 'src');",
    "57": "dest_ip: fwtool.map_invert(uci.get('firewall', s, 'dest_ip'), 'toLowerCase'),",
    "58": "dest_port: fwtool.map_invert(uci.get('firewall', s, 'dest_port')),",
    "59": "dest_device: uci.get('firewall', s, 'device')",
    "64": "var m = String(uci.get('firewall', s, 'limit')).match(/^(\\d+)\\/([smhd])\\w*$/i),",
    "68": "burst: uci.get('firewall', s, 'limit_burst')",
    "78": "var t = uci.get('firewall', s, 'target'),",
    "81": "snat_ip:   uci.get('firewall', s, 'snat_ip'),",
    "82": "snat_port: uci.get('firewall', s, 'snat_port')",
    "155": "uci.load('firewall')",
    "186": "return uci.get('firewall', section_id, 'name') || _('Unnamed NAT');",
    "323": "uci.sections('firewall', 'ipset', function(s) {"
  },
  "luci/applications/luci-app-firewall/htdocs/luci-static/resources/view/firewall/zones.js": {
    "4": "'require uci';",
    "47": "var val = uci.get('firewall', section_id, 'synflood_protect');",
    "48": "return (val != null) ? val : uci.get('firewall', section_id, 'syn_flood');",
    "51": "uci.unset('firewall', section_id, 'syn_flood');",
    "52": "uci.set('firewall', section_id, 'synflood_protect', value);",
    "55": "uci.unset('firewall', section_id, 'syn_flood');",
    "56": "uci.unset('firewall', section_id, 'synflood_protect');",
    "88": "var flow_offloading = uci.get('firewall', section_id, 'flow_offloading');",
    "89": "var flow_offloading_hw = uci.get('firewall', section_id, 'flow_offloading_hw');",
    "95": "uci.set('firewall', section_id, 'flow_offloading', value === '0' ? null : '1');",
    "96": "uci.set('firewall', section_id, 'flow_offloading_hw', value === '2' ? '1' : null);",
    "122": "var name = uci.get('firewall', section_id, 'name');",
    "133": "o.datatype = L.hasSystemFeature('firewall4') ? 'uciname' : 'and(uciname,maxlength(11))';",
    "138": "return uci.set('firewall', section_id, 'name', formvalue);",
    "147": "return uci.get('firewall', section_id, 'name');",
    "171": "var family = uci.get('firewall', section_id, 'family')",
    "172": "var masq_src = uci.get('firewall', section_id, 'masq_src')",
    "173": "var masq_dest = uci.get('firewall', section_id, 'masq_dest')",
    "187": "return uci.get('firewall', section_id, 'network');",
    "190": "var name = uci.get('firewall', section_id, 'name'),",
    "224": "var name = uci.get('firewall', section_id, 'name');",
    "231": "o = s.taboption('advanced', widgets.DeviceSelect, 'device', _('Covered devices'), _('Use this option to classify zone traffic by raw, non-<em>uci</em> managed network devices.'));",
    "246": "var family = uci.get('firewall', section_id, 'family')",
    "247": "var masq_src = uci.get('firewall', section_id, 'masq_src')",
    "248": "var masq_dest = uci.get('firewall', section_id, 'masq_dest')",
    "263": "o.datatype = 'list(neg(or(uciname,hostname,ipmask)))';",
    "267": "o.datatype = 'list(neg(or(uciname,hostname,ipmask4)))';",
    "274": "o.datatype = 'list(neg(or(uciname,hostname,ipmask)))';",
    "278": "o.datatype = 'list(neg(or(uciname,hostname,ipmask4)))';",
    "327": "return uci.get('firewall', section_id, 'extra_src') || uci.get('firewall', section_id, 'extra');",
    "330": "uci.unset('firewall', section_id, 'extra');",
    "331": "uci.set('firewall', section_id, 'extra_src', value);",
    "337": "return uci.get('firewall', section_id, 'extra_dest') || uci.get('firewall', section_id, 'extra_src') || uci.get('firewall', section_id, 'extra');",
    "340": "uci.unset('firewall', section_id, 'extra');",
    "341": "uci.set('firewall', section_id, 'extra_dest', value);",
    "349": "var name = uci.get('firewall', section_id, 'name');",
    "361": "return (uci.get('firewall', section_id, 'name') != value);",
    "365": "zone = this.lookupZone(uci.get('firewall', section_id, 'name')),",
    "376": "zone = this.lookupZone(uci.get('firewall', section_id, 'name')),"
  },
  "luci/applications/luci-app-fwknopd/htdocs/luci-static/resources/view/fwknopd.js": {
    "57": "this.uciconfig || this.section.uciconfig || this.map.config,",
    "58": "this.ucisection || section_id,",
    "133": "this.uciconfig || this.section.uciconfig || this.map.config,",
    "134": "this.ucisection || section_id,",
    "476": "s = m.section(form.TypedSection, 'global', _('Enable Uci/Luci control'));",
    "478": "s.option(form.Flag, 'uci_enabled', _('Enable config overwrite'), _('When unchecked, the config files in /etc/fwknopd will be used as is, ignoring any settings here.'));"
  },
  "luci/applications/luci-app-hd-idle/htdocs/luci-static/resources/view/hd_idle.js": {
    "5": "'require uci';",
    "8": "var v = uci.get('hd-idle', section_id, 'disk') || '';",
    "20": "return E('span', (uci.get('hd-idle', section_id, 'idle_time_interval') || '')",
    "22": "+ (uci.get('hd-idle', section_id, 'idle_time_unit') || ''));"
  },
  "luci/applications/luci-app-https-dns-proxy/htdocs/luci-static/resources/view/https-dns-proxy/overview.js": {
    "21": "L.resolveDefault(L.uci.load(pkg.Name), {}),",
    "22": "L.resolveDefault(L.uci.load(\"dhcp\"), {}),",
    "52": "var dhcp_dnsmasq_values = Object.values(L.uci.sections(\"dhcp\", \"dnsmasq\"));",
    "93": "L.uci.set(pkg.Name, section_id, \"dnsmasq_config_update\", formvalue);",
    "105": "if (element[\".name\"] === L.uci.resolveSID(\"dhcp\", element[\".name\"])) {",
    "205": "let resolver = L.uci.get(pkg.Name, section_id, \"resolver_url\");",
    "254": "L.uci.set(pkg.Name, section_id, \"resolver_url\", formvalue);",
    "290": "L.uci.set(pkg.Name, section_id, \"resolver_url\", resolver);",
    "328": "L.uci.set(pkg.Name, section_id, \"resolver_url\", resolver);"
  },
  "luci/applications/luci-app-https-dns-proxy/htdocs/luci-static/resources/view/status/include/71_https-dns-proxy.js": {
    "3": "\"require uci\";"
  },
  "luci/applications/luci-app-keepalived/htdocs/luci-static/resources/view/keepalived/ipaddress.js": {
    "5": "'require uci';",
    "11": "uci.load('keepalived'),",
    "60": "ipaddress = uci.sections('keepalived', 'ipaddress');"
  },
  "luci/applications/luci-app-keepalived/htdocs/luci-static/resources/view/keepalived/overview.js": {
    "4": "'require uci';",
    "17": "uci.load('keepalived'),",
    "39": "var instances = uci.sections('keepalived', 'vrrp_instance');"
  },
  "luci/applications/luci-app-keepalived/htdocs/luci-static/resources/view/keepalived/route.js": {
    "5": "'require uci';",
    "11": "uci.load('keepalived'),",
    "66": "route = uci.sections('keepalived', 'route');"
  },
  "luci/applications/luci-app-keepalived/htdocs/luci-static/resources/view/keepalived/script.js": {
    "5": "'require uci';",
    "10": "uci.load('keepalived'),",
    "18": "vrrp_scripts = uci.sections('keepalived', 'vrrp_script');"
  },
  "luci/applications/luci-app-keepalived/htdocs/luci-static/resources/view/keepalived/servers.js": {
    "4": "'require uci';",
    "9": "uci.load('keepalived'),",
    "54": "real_servers = uci.sections('keepalived', 'real_server');",
    "179": "urls = uci.sections('keepalived', 'url');"
  },
  "luci/applications/luci-app-keepalived/htdocs/luci-static/resources/view/keepalived/track_interface.js": {
    "5": "'require uci';"
  },
  "luci/applications/luci-app-keepalived/htdocs/luci-static/resources/view/keepalived/vrrp_instance.js": {
    "4": "'require uci';",
    "12": "uci.load('keepalived'),",
    "70": "ipaddress = uci.sections('keepalived', 'ipaddress');",
    "98": "var peers = uci.sections('keepalived', 'peer');",
    "241": "ipaddress = uci.sections('keepalived', 'ipaddress');",
    "242": "routes = uci.sections('keepalived', 'route');",
    "243": "interfaces = uci.sections('keepalived', 'track_interface');",
    "244": "scripts = uci.sections('keepalived', 'track_script');"
  },
  "luci/applications/luci-app-keepalived/htdocs/luci-static/resources/view/keepalived/vrrp_sync_group.js": {
    "5": "'require uci';",
    "10": "uci.load('keepalived'),",
    "18": "instances = uci.sections('keepalived', 'vrrp_instance');"
  },
  "luci/applications/luci-app-keepalived/htdocs/luci-static/resources/view/status/include/35_keepalived.js": {
    "3": "'require uci';",
    "18": "uci.load('keepalived'),",
    "24": "var instances = uci.sections('keepalived', 'vrrp_instance');"
  },
  "luci/applications/luci-app-ksmbd/htdocs/luci-static/resources/view/ksmbd.js": {
    "5": "'require uci';",
    "39": "o.cfgvalue = (section_id => L.toArray(uci.get('ksmbd', section_id, 'interface')));",
    "48": "return uci.set('ksmbd', section_id, 'interface', newNetworks.join(' '));"
  },
  "luci/applications/luci-app-ledtrig-rssi/htdocs/luci-static/resources/view/system/led-trigger/rssi.js": {
    "14": "o.ucioption = 'iface';"
  },
  "luci/applications/luci-app-ledtrig-usbport/htdocs/luci-static/resources/view/system/led-trigger/usbport.js": {
    "4": "'require uci';",
    "34": "value = uci.get('system', section_id, 'port');"
  },
  "luci/applications/luci-app-libreswan/htdocs/luci-static/resources/view/libreswan/proposals.js": {
    "5": "'require uci';",
    "22": "ui.addValidator(nameEl, 'uciname', true, function(v) {",
    "24": "...uci.sections('libreswan', 'crypto_proposal'),",
    "25": "...uci.sections('libreswan', 'tunnel'),"
  },
  "luci/applications/luci-app-libreswan/htdocs/luci-static/resources/view/libreswan/tunnels.js": {
    "5": "'require uci';",
    "28": "uci.load('libreswan'),",
    "37": "proposals = uci.sections('libreswan', 'crypto_proposal');",
    "54": "ui.addValidator(nameEl, 'uciname', true, function(v) {",
    "56": "...uci.sections('libreswan', 'crypto_proposal'),",
    "57": "...uci.sections('libreswan', 'tunnel'),",
    "249": "var interfaces = uci.sections('network', 'interface');"
  },
  "luci/applications/luci-app-lldpd/htdocs/luci-static/resources/lldpd.js": {
    "13": "'require uci';",
    "214": "return uci.load('luci').then(function() {"
  },
  "luci/applications/luci-app-lldpd/htdocs/luci-static/resources/view/lldpd/config.js": {
    "13": "'require uci';",
    "71": "uci.load('lldpd'),",
    "98": "uci.set('lldpd', section_id, 'enabled', value);",
    "132": "uci.get('lldpd', 'config', 'lldp_location');",
    "167": "uci.set('lldpd', 'config', 'lldp_location',",
    "184": "uci.set('lldpd', 'config', 'lldp_location',",
    "196": "uci.set('lldpd', 'config', 'lldp_location', 'elin ' + elin);",
    "211": "const loc = uci.get(this.config, section_id, 'lldp_location');",
    "447": "const opt = uci.get(this.config, section_id, this.option);",
    "881": "const tlv = uci.get('lldpd', section_id, 'tlv')?.trim().toLowerCase();",
    "911": "uci.set(this.config, section_id, 'tlv', tlvParts);",
    "984": "uci.set(this.config, section_id, 'tlv', value);"
  },
  "luci/applications/luci-app-lorawan-basicstation/htdocs/luci-static/resources/view/lorawan-basicstation/advanced.js": {
    "4": "'require uci';",
    "9": "uci.load('basicstation')",
    "48": "options = uci.sections('basicstation', 'rssitcomp')",
    "96": "options = uci.sections('basicstation', 'rfconf');"
  },
  "luci/applications/luci-app-lorawan-basicstation/htdocs/luci-static/resources/view/lorawan-basicstation/general.js": {
    "4": "'require uci';",
    "12": "uci.load('basicstation')",
    "40": "uci.set('basicstation', sid, 'idGenIf', value);",
    "41": "uci.set('basicstation', sid, 'routerid', path);",
    "126": "var options = uci.sections('basicstation', 'rfconf');"
  },
  "luci/applications/luci-app-lxc/luasrc/controller/lxc.lua": {
    "19": "local uci  = require \"luci.model.uci\".cursor()",
    "22": "local url  = util.shellquote(uci:get(\"lxc\", \"lxc\", \"url\"))",
    "108": "local min_space = tonumber(uci:get(\"lxc\", \"lxc\", \"min_space\")) or 100000",
    "111": "local min_temp = tonumber(uci:get(\"lxc\", \"lxc\", \"min_temp\")) or 100000"
  },
  "luci/applications/luci-app-minidlna/htdocs/luci-static/resources/view/minidlna.js": {
    "4": "'require uci';",
    "10": "var port = +uci.get_first('minidlna', 'minidlna', 'port');",
    "63": "return L.toArray(uci.get('minidlna', section_id, 'interface')).join(',').split(/[ \\t,]+/);",
    "66": "return uci.set('minidlna', section_id, 'interface', L.toArray(value).join(','));",
    "82": "return L.toArray(uci.get('minidlna', section_id, 'album_art_names')).join('/').split(/\\//);",
    "85": "return uci.set('minidlna', section_id, 'album_art_names', L.toArray(value).join('/'));"
  },
  "luci/applications/luci-app-minidlna/htdocs/luci-static/resources/view/status/include/80_minidlna.js": {
    "4": "'require uci';",
    "10": "return uci.load('minidlna').then(function() {",
    "11": "var port = +uci.get_first('minidlna', 'minidlna', 'port');"
  },
  "luci/applications/luci-app-mjpg-streamer/htdocs/luci-static/resources/view/mjpg-streamer/mjpg-streamer.js": {
    "4": "'require uci';",
    "26": "return Promise.all([uci.load('mjpg-streamer')]);",
    "158": "var port = uci.get('mjpg-streamer', 'core', 'port');",
    "160": "if (uci.get('mjpg-streamer', 'core', 'enable_auth') == '1') {",
    "161": "var user = uci.get('mjpg-streamer', 'core', 'username');",
    "162": "var pass = uci.get('mjpg-streamer', 'core', 'password');"
  },
  "luci/applications/luci-app-mosquitto/htdocs/luci-static/resources/view/mosquitto/mosquitto.js": {
    "37": "o = s.option(form.Flag, 'use_uci', _('Use this LuCI configuration page'), _("
  },
  "luci/applications/luci-app-mwan3/htdocs/luci-static/resources/view/mwan3/network/interface.js": {
    "5": "'require uci';",
    "14": "uci.load('network')",
    "36": "ui.addValidator(nameEl, 'uciname', true, function(v) {",
    "38": "...uci.sections('mwan3', 'interface'),",
    "39": "...uci.sections('mwan3', 'member'),",
    "40": "...uci.sections('mwan3', 'policy'),",
    "41": "...uci.sections('mwan3', 'rule')",
    "292": "var metric = uci.get('network', s, 'metric')"
  },
  "luci/applications/luci-app-mwan3/htdocs/luci-static/resources/view/mwan3/network/member.js": {
    "4": "'require uci';",
    "10": "uci.load('mwan3')",
    "31": "ui.addValidator(nameEl, 'uciname', true, function(v) {",
    "33": "...uci.sections('mwan3', 'interface'),",
    "34": "...uci.sections('mwan3', 'member'),",
    "35": "...uci.sections('mwan3', 'policy'),",
    "36": "...uci.sections('mwan3', 'rule')",
    "51": "var options = uci.sections('mwan3', 'interface')"
  },
  "luci/applications/luci-app-mwan3/htdocs/luci-static/resources/view/mwan3/network/policy.js": {
    "4": "'require uci';",
    "10": "uci.load('mwan3')",
    "35": "ui.addValidator(nameEl, 'uciname', true, function(v) {",
    "37": "...uci.sections('mwan3', 'interface'),",
    "38": "...uci.sections('mwan3', 'member'),",
    "39": "...uci.sections('mwan3', 'policy'),",
    "40": "...uci.sections('mwan3', 'rule')",
    "55": "var options = uci.sections('mwan3', 'member')"
  },
  "luci/applications/luci-app-mwan3/htdocs/luci-static/resources/view/mwan3/network/rule.js": {
    "5": "'require uci';",
    "12": "uci.load('mwan3')",
    "40": "ui.addValidator(nameEl, 'uciname', true, function(v) {",
    "42": "...uci.sections('mwan3', 'interface'),",
    "43": "...uci.sections('mwan3', 'member'),",
    "44": "...uci.sections('mwan3', 'policy'),",
    "45": "...uci.sections('mwan3', 'rule')",
    "122": "var options = uci.sections('mwan3', 'policy')"
  },
  "luci/applications/luci-app-mwan3/htdocs/luci-static/resources/view/mwan3/status/diagnostics.js": {
    "3": "'require uci';",
    "56": "uci.load('mwan3')",
    "73": "var options = uci.sections('mwan3', 'interface')"
  },
  "luci/applications/luci-app-natmap/htdocs/luci-static/resources/view/natmap.js": {
    "99": "o.ucioption = 'forward_target';"
  },
  "luci/applications/luci-app-nft-qos/luasrc/model/cbi/nft-qos/nft-qos.lua": {
    "4": "local uci = require(\"luci.model.uci\").cursor()",
    "9": "local def_rate_dl = uci:get(\"nft-qos\", \"default\", \"static_rate_dl\")",
    "10": "local def_rate_ul = uci:get(\"nft-qos\", \"default\", \"static_rate_ul\")",
    "11": "local def_unit_dl = uci:get(\"nft-qos\", \"default\", \"static_unit_dl\")",
    "12": "local def_unit_ul = uci:get(\"nft-qos\", \"default\", \"static_unit_ul\")",
    "14": "local def_up = uci:get(\"nft-qos\", \"default\", \"dynamic_bw_up\")",
    "15": "local def_down = uci:get(\"nft-qos\", \"default\", \"dynamic_bw_down\")",
    "17": "local limit_enable = uci:get(\"nft-qos\", \"default\", \"limit_enable\")",
    "18": "local limit_mac_enable = uci:get(\"nft-qos\", \"default\", \"limit_mac_enable\")",
    "19": "local limit_type = uci:get(\"nft-qos\", \"default\", \"limit_type\")",
    "20": "local enable_priority = uci:get(\"nft-qos\", \"default\", \"priority_enable\")"
  },
  "luci/applications/luci-app-nlbwmon/htdocs/luci-static/resources/view/nlbw/config.js": {
    "4": "'require uci';",
    "16": "uci.set('nlbwmon', section_id, 'database_interval', interval.formvalue(section_id));",
    "19": "uci.set('nlbwmon', section_id, 'database_interval', '%s/%s'.format(",
    "27": "var oldval = L.toArray(uci.get('nlbwmon', section_id, 'local_network')),",
    "37": "uci.set('nlbwmon', section_id, 'local_network', newval);",
    "46": "return uci.load('nlbwmon');",
    "66": "var value = uci.get('nlbwmon', section_id, 'database_interval'),",
    "78": "if (/^[0-9]{4}-[0-9]{2}-[0-9]{2}\\/[0-9]+$/.test(uci.get_first('nlbwmon', 'nlbwmon', 'database_interval')))",
    "87": "var value = +uci.get('nlbwmon', section_id, 'database_interval');",
    "100": "var value = uci.get('nlbwmon', section_id, 'database_interval'),",
    "115": "var value = uci.get('nlbwmon', section_id, 'database_interval'),",
    "128": "return L.toArray(uci.get('nlbwmon', section_id, 'local_network'));",
    "135": "return L.toArray(uci.get('nlbwmon', section_id, 'local_network')).filter(function(addr) {"
  },
  "luci/applications/luci-app-ocserv/luasrc/model/cbi/ocserv/users.lua": {
    "9": "if m.uci:get(\"ocserv\", \"config\", \"auth\") == \"plain\" then"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/frontend/olsrd.js": {
    "5": "'require\tuci';",
    "15": "return Promise.all([uci.load('olsrd').then(() => {",
    "18": "uci.sections('olsrd', 'InterfaceDefaults', function (s) {",
    "24": "uci.add('olsrd', 'InterfaceDefaults');",
    "66": "return uci.get('olsrd', section_id, 'SmartGateway') || 'no';",
    "276": "uci.set('olsrd', section_id, 'NatThreshold', n );",
    "390": "uci.set('olsrd', section_id, 'HelloInterval', n);",
    "401": "uci.set('olsrd', section_id, 'HelloValidityTime', n);",
    "412": "uci.set('olsrd', section_id, 'TcInterval', n);",
    "423": "uci.set('olsrd', section_id, 'TcValidityTime', n);",
    "434": "uci.set('olsrd', section_id, 'MidInterval', n);",
    "445": "uci.set('olsrd', section_id, 'MidValidityTime', n);",
    "456": "uci.set('olsrd', section_id, 'HnaInterval', n);",
    "467": "uci.set('olsrd', section_id, 'HnaValidityTime', n);",
    "490": "var sid = uci.add('olsrd', 'Interface');",
    "491": "uci",
    "494": "return uci.changes();",
    "518": "return uci.get('olsrd', section_id, 'ignore') || '0';",
    "526": "return uci.get('olsrd', section_id, 'Mode') || uci.get_first('olsrd', 'InterfaceDefaults', 'Mode');",
    "531": "var i = uci.get('olsrd', section_id, 'HelloInterval') || uci.get_first('olsrd', 'InterfaceDefaults', 'HelloInterval');",
    "532": "var v = uci.get('olsrd', section_id, 'HelloValidityTime') || uci.get_first('olsrd', 'InterfaceDefaults', 'HelloValidityTime');",
    "538": "var i = uci.get('olsrd', section_id, 'TcInterval') || uci.get_first('olsrd', 'InterfaceDefaults', 'TcInterval');",
    "539": "var v = uci.get('olsrd', section_id, 'TcValidityTime') || uci.get_first('olsrd', 'InterfaceDefaults', 'TcValidityTime');",
    "545": "var i = uci.get('olsrd', section_id, 'MidInterval') || uci.get_first('olsrd', 'InterfaceDefaults', 'MidInterval');",
    "546": "var v = uci.get('olsrd', section_id, 'MidValidityTime') || uci.get_first('olsrd', 'InterfaceDefaults', 'MidValidityTime');",
    "552": "var i = uci.get('olsrd', section_id, 'HnaInterval') || uci.get_first('olsrd', 'InterfaceDefaults', 'HnaInterval');",
    "553": "var v = uci.get('olsrd', section_id, 'HnaValidityTime') || uci.get_first('olsrd', 'InterfaceDefaults', 'HnaValidityTime');"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/frontend/olsrd6.js": {
    "5": "'require\tuci';",
    "15": "return Promise.all([uci.load('olsrd6').then(() => {",
    "18": "uci.sections('olsrd6', 'InterfaceDefaults', function (s) {",
    "24": "uci.add('olsrd6', 'InterfaceDefaults');",
    "66": "return uci.get('olsrd6', section_id, 'SmartGateway') || 'no';",
    "270": "uci.set('olsrd6', section_id, 'NatThreshold', n);",
    "369": "uci.set('olsrd6', section_id, 'HelloInterval', n);",
    "380": "uci.set('olsrd6', section_id, 'HelloValidityTime', n);",
    "391": "uci.set('olsrd6', section_id, 'TcInterval', n);",
    "402": "uci.set('olsrd6', section_id, 'TcValidityTime', n);",
    "413": "uci.set('olsrd6', section_id, 'MidInterval', n);",
    "424": "uci.set('olsrd6', section_id, 'MidValidityTime', n);",
    "435": "uci.set('olsrd6', section_id, 'HnaInterval', n);",
    "446": "uci.set('olsrd6', section_id, 'HnaValidityTime', n);",
    "467": "var sid = uci.add('olsrd6', 'Interface');",
    "468": "uci",
    "471": "return uci.changes();",
    "494": "return uci.get('olsrd6', section_id, 'ignore') || '0';",
    "502": "return uci.get('olsrd6', section_id, 'Mode') || uci.get_first('olsrd6', 'InterfaceDefaults', 'Mode');",
    "507": "var i = uci.get('olsrd6', section_id, 'HelloInterval') || uci.get_first('olsrd6', 'InterfaceDefaults', 'HelloInterval');",
    "508": "var v = uci.get('olsrd6', section_id, 'HelloValidityTime') || uci.get_first('olsrd6', 'InterfaceDefaults', 'HelloValidityTime');",
    "514": "var i = uci.get('olsrd6', section_id, 'TcInterval') || uci.get_first('olsrd6', 'InterfaceDefaults', 'TcInterval');",
    "515": "var v = uci.get('olsrd6', section_id, 'TcValidityTime') || uci.get_first('olsrd6', 'InterfaceDefaults', 'TcValidityTime');",
    "521": "var i = uci.get('olsrd6', section_id, 'MidInterval') || uci.get_first('olsrd6', 'InterfaceDefaults', 'MidInterval');",
    "522": "var v = uci.get('olsrd6', section_id, 'MidValidityTime') || uci.get_first('olsrd6', 'InterfaceDefaults', 'MidValidityTime');",
    "528": "var i = uci.get('olsrd6', section_id, 'HnaInterval') || uci.get_first('olsrd6', 'InterfaceDefaults', 'HnaInterval');",
    "529": "var v = uci.get('olsrd6', section_id, 'HnaValidityTime') || uci.get_first('olsrd6', 'InterfaceDefaults', 'HnaValidityTime');"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/frontend/olsrddisplay.js": {
    "5": "'require uci';",
    "9": "return Promise.all([uci.load('luci_olsr')]);"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/frontend/olsrdhna.js": {
    "4": "'require uci';",
    "9": "return Promise.all([uci.load('olsrd')]);",
    "12": "var ipv = uci.get_first('olsrd', 'olsrd', 'IpVersion') || '4';"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/frontend/olsrdhna6.js": {
    "4": "'require\tuci';",
    "9": "return Promise.all([uci.load('olsrd6')]);"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/frontend/olsrdiface.js": {
    "4": "'require\tuci';",
    "10": "return Promise.all([uci.load('olsrd')]);",
    "47": "return uci.get('olsrd', section_id, 'ignore') || '0';",
    "156": "uci.set('olsrd', section_id, 'HelloInterval', n);",
    "167": "uci.set('olsrd', section_id, 'HelloValidityTime', n);",
    "178": "uci.set('olsrd', section_id, 'TcInterval', n);",
    "189": "uci.set('olsrd', section_id, 'TcValidityTime', n);",
    "200": "uci.set('olsrd', section_id, 'MidInterval', n);",
    "211": "uci.set('olsrd', section_id, 'MidValidityTime', n);",
    "222": "uci.set('olsrd', section_id, 'HnaInterval', n);",
    "233": "uci.set('olsrd', section_id, 'HnaValidityTime', n);"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/frontend/olsrdiface6.js": {
    "4": "'require\tuci';",
    "10": "return Promise.all([uci.load('olsrd6')]);",
    "47": "return uci.get('olsrd', section_id, 'ignore') || '0';",
    "140": "uci.set('olsrd6', section_id, 'HelloInterval', n);",
    "151": "uci.set('olsrd6', section_id, 'HelloValidityTime', n);",
    "162": "uci.set('olsrd6', section_id, 'TcInterval', n);",
    "173": "uci.set('olsrd6', section_id, 'TcValidityTime', n);",
    "184": "uci.set('olsrd6', section_id, 'MidInterval', n);",
    "195": "uci.set('olsrd6', section_id, 'MidValidityTime', n);",
    "206": "uci.set('olsrd6', section_id, 'HnaInterval', n);",
    "217": "uci.set('olsrd6', section_id, 'HnaValidityTime', n);"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/frontend/olsrdplugins.js": {
    "4": "'require\tuci';",
    "13": "uci.load('olsrd').then(() => {",
    "15": "const sections = uci.sections('olsrd', 'LoadPlugin');",
    "27": "var sid = uci.add('olsrd', 'LoadPlugin');",
    "28": "uci.set('olsrd', sid, 'ignore', '1');",
    "29": "uci.set('olsrd', sid, 'library', pluginname);",
    "49": "var plname = uci.get('olsrd', sid, 'library');",
    "55": "return uci.get('olsrd', section_id, 'ignore') || '0';",
    "204": "const [otype, name, defaultVal, uci2cbi, cbi2uci] = option;",
    "230": "return uci.get('olsrd', section_id, name);",
    "240": "return uci.get('olsrd', section_id, name);",
    "242": "if (typeof uci2cbi === 'function') {",
    "244": "return uci2cbi(uci.get('olsrd', section_id, name));",
    "247": "if (typeof cbi2uci === 'function') {",
    "249": "var saveval=cbi2uci(formvalue);",
    "250": "uci.set('olsrd', section_id, name, saveval);",
    "284": "return uci.get(section_id, 'ignore') || '0';"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/frontend/olsrdplugins6.js": {
    "4": "'require\tuci';",
    "11": "uci.load('olsrd6').then(() => {",
    "13": "const sections = uci.sections('olsrd6', 'LoadPlugin');",
    "25": "var sid = uci.add('olsrd6', 'LoadPlugin');",
    "26": "uci.set('olsrd6', sid, 'ignore', '1');",
    "27": "uci.set('olsrd6', sid, 'library', pluginname);",
    "47": "var plname = uci.get('olsrd6', sid, 'library');",
    "53": "return uci.get('olsrd6', section_id, 'ignore') || '0';",
    "202": "const [otype, name, defaultVal, uci2cbi, cbi2uci] = option;",
    "228": "return uci.get('olsrd6', section_id, name);",
    "238": "return uci.get('olsrd6', section_id, name);",
    "240": "if (typeof uci2cbi === 'function') {",
    "242": "return uci2cbi(uci.get('olsrd6', section_id, name));",
    "245": "if (typeof cbi2uci === 'function') {",
    "247": "var saveval=cbi2uci(formvalue);",
    "248": "uci.set('olsrd6', section_id, name, saveval);",
    "282": "return uci.get(section_id, 'ignore') || '0';"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/status-olsr/hna.js": {
    "2": "'require uci';",
    "24": "var v4_port = parseInt(uci.get('olsrd', 'olsrd_jsoninfo', 'port') || '') || 9090;",
    "25": "var v6_port = parseInt(uci.get('olsrd6', 'olsrd_jsoninfo', 'port') || '') || 9090;",
    "99": "var resolveVal = uci.get('luci_olsr', 'general', 'resolve');",
    "156": "return Promise.all([uci.load('olsrd'), uci.load('luci_olsr')]);"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/status-olsr/interfaces.js": {
    "2": "'require uci';",
    "18": "var v4_port = parseInt(uci.get('olsrd', 'olsrd_jsoninfo', 'port') || '') || 9090;",
    "19": "var v6_port = parseInt(uci.get('olsrd6', 'olsrd_jsoninfo', 'port') || '') || 9090;",
    "121": "return Promise.all([uci.load('olsrd'), uci.load('luci_olsr')]);"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/status-olsr/mid.js": {
    "2": "'require uci';",
    "17": "var v4_port = parseInt(uci.get('olsrd', 'olsrd_jsoninfo', 'port') || '') || 9090;",
    "18": "var v6_port = parseInt(uci.get('olsrd6', 'olsrd_jsoninfo', 'port') || '') || 9090;"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/status-olsr/neighbors.js": {
    "2": "'require uci';",
    "52": "var v4_port = parseInt(uci.get('olsrd', 'olsrd_jsoninfo', 'port') || '') || 9090;",
    "53": "var v6_port = parseInt(uci.get('olsrd6', 'olsrd_jsoninfo', 'port') || '') || 9090;",
    "134": "var resolveVal = uci.get('luci_olsr', 'general', 'resolve');",
    "254": "return Promise.all([uci.load('olsrd'), uci.load('luci_olsr')]);"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/status-olsr/routes.js": {
    "2": "'require uci';",
    "38": "var v4_port = parseInt(uci.get('olsrd', 'olsrd_jsoninfo', 'port') || '') || 9090;",
    "39": "var v6_port = parseInt(uci.get('olsrd6', 'olsrd_jsoninfo', 'port') || '') || 9090;",
    "112": "var resolveVal = uci.get('luci_olsr', 'general', 'resolve');",
    "165": "return Promise.all([uci.load('olsrd'), uci.load('luci_olsr')]);"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/status-olsr/smartgw.js": {
    "2": "'require uci';",
    "18": "var v4_port = parseInt(uci.get('olsrd', 'olsrd_jsoninfo', 'port') || '') || 9090;",
    "19": "var v6_port = parseInt(uci.get('olsrd6', 'olsrd_jsoninfo', 'port') || '') || 9090;",
    "116": "return Promise.all([uci.load('olsrd'), uci.load('luci_olsr')]);",
    "145": "uci.sections('olsrd', 'olsrd', function (s) {"
  },
  "luci/applications/luci-app-olsr/htdocs/luci-static/resources/view/olsr/status-olsr/topology.js": {
    "2": "'require uci';",
    "32": "var v4_port = parseInt(uci.get('olsrd', 'olsrd_jsoninfo', 'port') || '') || 9090;",
    "33": "var v6_port = parseInt(uci.get('olsrd6', 'olsrd_jsoninfo', 'port') || '') || 9090;",
    "125": "return Promise.all([uci.load('olsrd'), uci.load('luci_olsr')]);"
  },
  "luci/applications/luci-app-olsr-viz/htdocs/luci-static/resources/view/olsr-viz/olsr-viz-view.js": {
    "2": "'require uci';"
  },
  "luci/applications/luci-app-openlist/htdocs/luci-static/resources/view/openlist/config.js": {
    "7": "'require uci';",
    "58": "uci.load('openlist')",
    "64": "var webport = uci.get(data[0], 'config', 'listen_http_port') || '5244';"
  },
  "luci/applications/luci-app-openlist/htdocs/luci-static/resources/view/openlist/log.js": {
    "7": "'require uci';"
  },
  "luci/applications/luci-app-openvpn/luasrc/controller/openvpn.lua": {
    "19": "local uci     = require(\"luci.model.uci\").cursor()",
    "49": "if not uci:get_first(\"openvpn\", name) then",
    "50": "uci:set(\"openvpn\", name, \"openvpn\")",
    "51": "uci:set(\"openvpn\", name, \"config\", file)",
    "52": "uci:save(\"openvpn\")",
    "53": "uci:commit(\"openvpn\")"
  },
  "luci/applications/luci-app-openvpn/luasrc/model/cbi/openvpn-file.lua": {
    "6": "local uci       = require(\"luci.model.uci\").cursor()",
    "7": "local cfg_file  = uci:get(\"openvpn\", arg[1], \"config\")"
  },
  "luci/applications/luci-app-openvpn/luasrc/model/cbi/openvpn.lua": {
    "6": "local uci = require \"luci.model.uci\".cursor()",
    "27": "uci:load(\"openvpn_recipes\")",
    "28": "uci:foreach( \"openvpn_recipes\", \"openvpn_recipe\",",
    "67": "local s = uci:section(\"openvpn\", \"openvpn\", name)",
    "69": "local options = uci:get_all(\"openvpn_recipes\", recipe)",
    "75": "uci:set(\"openvpn\", name, k, v)",
    "78": "uci:save(\"openvpn\")",
    "79": "uci:commit(\"openvpn\")",
    "99": "uci:delete(\"openvpn\", name)",
    "100": "uci:save(\"openvpn\")",
    "101": "uci:commit(\"openvpn\")"
  },
  "luci/applications/luci-app-p910nd/htdocs/luci-static/resources/view/p910nd.js": {
    "8": "'require uci';",
    "190": "uci.set(pkg.Name, section_id, 'mdns_product', value);",
    "242": "return string_array_convert(uci.get(pkg.Name, section_id, 'mdns_cmd'));",
    "250": "uci.set(pkg.Name, section_id, 'mdns_cmd', string_array_convert(value));"
  },
  "luci/applications/luci-app-pbr/htdocs/luci-static/resources/pbr/status.js": {
    "236": ").format(L.uci.get(pkg.Name, \"config\", \"resolver_set\")),",
    "319": ").format(L.uci.get(pkg.Name, \"config\", \"resolver_set\")),",
    "322": ").format(L.uci.get(pkg.Name, \"config\", \"resolver_set\")),",
    "325": ").format(L.uci.get(pkg.Name, \"config\", \"resolver_set\")),"
  },
  "luci/applications/luci-app-pbr/htdocs/luci-static/resources/view/pbr/overview.js": {
    "17": "L.resolveDefault(L.uci.load(pkg.Name), {}),",
    "306": "L.uci.get(pkg.Name, \"config\", \"webui_supported_protocol\")"
  },
  "luci/applications/luci-app-privoxy/htdocs/luci-static/resources/view/privoxy/privoxy.js": {
    "2": "'require uci';"
  },
  "luci/applications/luci-app-qos/htdocs/luci-static/resources/view/qos/qos.js": {
    "73": "Object.values(L.uci.sections('qos', 'class')).forEach(function(val, index) {"
  },
  "luci/applications/luci-app-rp-pppoe-server/htdocs/luci-static/resources/view/pppoe/rp-pppoe-relay.js": {
    "48": "o = s.option(form.Flag, 'use_non_uci_config', _('Use Non-UCI Config'), '<code>/etc/default/pppoe-relay</code>');"
  },
  "luci/applications/luci-app-rp-pppoe-server/htdocs/luci-static/resources/view/pppoe/rp-pppoe-server.js": {
    "76": "o = s.option(form.Flag, 'use_non_uci_config', _('Use Non-UCI Config'), '<code>/etc/default/pppoe-server</code>');"
  },
  "luci/applications/luci-app-samba4/htdocs/luci-static/resources/view/samba4.js": {
    "4": "'require uci';",
    "38": "return L.toArray(uci.get('samba4', section_id, 'interface'));",
    "48": "return uci.set('samba4', section_id, 'interface', newNetworks.join(' '));"
  },
  "luci/applications/luci-app-smartdns/htdocs/luci-static/resources/view/smartdns/smartdns.js": {
    "22": "'require uci';",
    "59": "var autoSetDnsmasq = uci.get_first('smartdns', 'smartdns', 'auto_set_dnsmasq');",
    "60": "var smartdnsPort = uci.get_first('smartdns', 'smartdns', 'port');",
    "61": "var dnsmasqServer = uci.get_first('dhcp', 'dnsmasq', 'server');",
    "73": "uci.unload('dhcp');",
    "74": "uci.load('dhcp');",
    "86": "uci.load('dhcp'),",
    "87": "uci.load('smartdns'),",
    "352": "download_files = uci.sections('smartdns', 'download-file');",
    "680": "servers = uci.sections('smartdns', 'server');",
    "777": "var proxy_server = uci.sections(\"smartdns\", \"smartdns\")[0].proxy_server;",
    "826": "var val = uci.sections('smartdns', 'server');",
    "980": "var val = uci.sections('smartdns', 'server');"
  },
  "luci/applications/luci-app-snmpd/htdocs/luci-static/resources/view/snmpd/snmpd.js": {
    "11": "+ \"Note, OpenWrt has mostly complete UCI support for snmpd, but this LuCI applet \""
  },
  "luci/applications/luci-app-splash/luasrc/controller/splash/splash.lua": {
    "3": "local uci = luci.model.uci.cursor()",
    "36": "local uci = luci.model.uci.cursor_state()",
    "41": "uci:foreach(\"luci_splash\", \"lease\", function(s)",
    "48": "uci:foreach(\"luci_splash\", \"whitelist\", function(s)",
    "65": "uci:foreach(\"luci_splash\", \"blacklist\", function(s)",
    "75": "local uci_state = require \"luci.model.uci\".cursor_state()",
    "78": "uci:foreach(\"luci_splash\", \"blacklist\", function(s)",
    "89": "local redirect_url = uci:get(\"luci_splash\", \"general\", \"redirect_url\")",
    "91": "redirect_url = uci_state:get(\"luci_splash_locations\", id, \"location\")",
    "94": "redirect_url = luci.model.uci.cursor():get(\"freifunk\", \"community\", \"homepage\") or 'http://www.freifunk.net'",
    "106": "local uci = luci.model.uci.cursor_state()",
    "158": "local uci = require \"luci.model.uci\".cursor_state()",
    "159": "local redirects = uci:get_all(\"luci_splash_locations\")",
    "160": "--uci:load(\"luci_splash_locations\")",
    "161": "uci:revert(\"luci_splash_locations\")",
    "169": "uci:section(\"luci_splash_locations\", \"redirect\", v[\".name\"], {",
    "176": "uci:save(\"luci_splash_redirects\")"
  },
  "luci/applications/luci-app-splash/luasrc/model/cbi/splash/splash.lua": {
    "3": "require(\"luci.model.uci\")",
    "27": "local uci = luci.model.uci.cursor()",
    "32": "uci:foreach(\"firewall\", \"zone\",",
    "40": "uci:foreach(\"network\", \"interface\",",
    "47": "uci:foreach(\"network\", \"alias\","
  },
  "luci/applications/luci-app-sqm/htdocs/luci-static/resources/view/network/sqm.js": {
    "5": "'require uci';",
    "37": "uci.load('sqm')",
    "86": "return uci.set(\"sqm\", section, \"enabled\", value);"
  },
  "luci/applications/luci-app-squid/htdocs/luci-static/resources/view/squid.js": {
    "6": "'require uci';",
    "32": "var load_squid = uci.load('squid')",
    "33": ".then(() => uci.get('squid', 'squid'));"
  },
  "luci/applications/luci-app-sshtunnel/htdocs/luci-static/resources/view/sshtunnel/ssh_servers.js": {
    "4": "'require uci';"
  },
  "luci/applications/luci-app-sshtunnel/htdocs/luci-static/resources/view/sshtunnel/ssh_tunnels.js": {
    "4": "'require uci';",
    "11": "uci.load('sshtunnel'),",
    "158": "o.datatype = 'uciname';",
    "160": "uci.sections('sshtunnel', 'server', function (s, sectionName) {"
  },
  "luci/applications/luci-app-statistics/htdocs/luci-static/resources/statistics/rrdtool.js": {
    "4": "'require uci';",
    "146": "uci.load('luci_statistics')",
    "151": "this.opts.host      = uci.get('luci_statistics', 'collectd', 'Hostname')        || hostname;",
    "152": "this.opts.timespan  = uci.get('luci_statistics', 'rrdtool', 'default_timespan') || 3600;",
    "153": "this.opts.width     = uci.get('luci_statistics', 'rrdtool', 'image_width')      || 600;",
    "154": "this.opts.height    = uci.get('luci_statistics', 'rrdtool', 'image_height')     || 150;",
    "155": "this.opts.rrdpath   = (uci.get('luci_statistics', 'collectd_rrdtool', 'DataDir') || '/tmp/rrd').replace(/\\/$/, '');",
    "156": "this.opts.rrasingle = (uci.get('luci_statistics', 'collectd_rrdtool', 'RRASingle') == '1');",
    "157": "this.opts.rramax    = (uci.get('luci_statistics', 'collectd_rrdtool', 'RRAMax') == '1');"
  },
  "luci/applications/luci-app-statistics/htdocs/luci-static/resources/statistics/rrdtool/definitions/chrony.js": {
    "5": "'require uci';"
  },
  "luci/applications/luci-app-statistics/htdocs/luci-static/resources/statistics/rrdtool/definitions/cpu.js": {
    "5": "'require uci';",
    "18": "var show_idle = uci.get(\"luci_statistics\", \"collectd_cpu\", \"ShowIdle\") == \"1\" ? true : false;",
    "20": "if (uci.get(\"luci_statistics\", \"collectd_cpu\", \"ReportByState\") == \"1\") {"
  },
  "luci/applications/luci-app-statistics/htdocs/luci-static/resources/statistics/rrdtool/definitions/cpufreq.js": {
    "5": "'require uci';",
    "24": "if (uci.get(\"luci_statistics\", \"collectd_cpufreq\", \"ExtraItems\")) {"
  },
  "luci/applications/luci-app-statistics/htdocs/luci-static/resources/statistics/rrdtool/definitions/memory.js": {
    "8": "'require uci';",
    "15": "var hide_free = uci.get(\"luci_statistics\", \"collectd_memory\", \"HideFree\") == \"1\" ? true : false;"
  },
  "luci/applications/luci-app-statistics/htdocs/luci-static/resources/view/statistics/collectd.js": {
    "6": "'require uci';",
    "14": "uci.load('luci_statistics')",
    "23": "if (!uci.get('luci_statistics', 'collectd_' + name))",
    "24": "uci.add('luci_statistics', 'statistics', 'collectd_' + name);",
    "55": "return uci.get('luci_statistics', 'collectd', 'Hostname');",
    "132": "section = uci.get('luci_statistics', section_id),"
  },
  "luci/applications/luci-app-statistics/htdocs/luci-static/resources/view/statistics/graphs.js": {
    "6": "'require uci';",
    "197": "var spanSel = E('select', { 'style': 'max-width:170px', 'data-name': 'timespan' }, L.toArray(uci.get('luci_statistics', 'collectd_rrdtool', 'RRATimespans')).map(function(span) {"
  },
  "luci/applications/luci-app-statistics/htdocs/luci-static/resources/view/statistics/plugins/iptables.js": {
    "4": "'require uci';",
    "141": "var table = uci.get('luci_statistics', section_id, 'table'),",
    "142": "chain = uci.get('luci_statistics', section_id, 'chain'),",
    "143": "rule = uci.get('luci_statistics', section_id, 'rule'),"
  },
  "luci/applications/luci-app-statistics/htdocs/luci-static/resources/view/statistics/plugins/splash_leases.js": {
    "7": "description: _('The splash leases plugin uses libuci to collect statistics about splash leases.'),"
  },
  "luci/applications/luci-app-strongswan-swanctl/htdocs/luci-static/resources/view/strongswan-swanctl/swanctl.js": {
    "4": "'require uci';",
    "28": "return uci.load('network');",
    "100": "var sections = uci.sections('ipsec', 'crypto_proposal');",
    "121": "var sections = uci.sections('ipsec', 'tunnel');",
    "259": "var xfrmSections = uci.sections('network').filter(function (section) {",
    "296": "var sections = uci.sections('ipsec', 'crypto_proposal');"
  },
  "luci/applications/luci-app-tinyproxy/htdocs/luci-static/resources/view/tinyproxy/tinyproxy.js": {
    "5": "'require uci';",
    "326": "return uci.load('tinyproxy').then(function() {",
    "327": "port = uci.get_first('tinyproxy', 'tinyproxy', 'Port');",
    "328": "isenabled = uci.get_first('tinyproxy', 'tinyproxy', 'enabled');",
    "341": "document.removeEventListener('uci-applied',Fn);",
    "343": "document.addEventListener('uci-applied', Fn);"
  },
  "luci/applications/luci-app-tor/htdocs/luci-static/resources/view/tor/tor-hs.js": {
    "5": "'require uci';",
    "42": "let tor = uci.get('tor-hs', section_id);",
    "57": "uci.set('tor-hs', section_id, 'Enabled', formvalue);",
    "64": "uci.set('tor-hs', section_id, 'Name', name);",
    "73": "var name = uci.get('tor-hs', section_id, 'Name');"
  },
  "luci/applications/luci-app-tor/htdocs/luci-static/resources/view/tor/tor.js": {
    "4": "'require uci';",
    "26": "let tail_include = uci.get('tor', section_id, 'tail_include');",
    "29": "return uci.set('tor', section_id, 'tail_include', tail_include);"
  },
  "luci/applications/luci-app-transmission/htdocs/luci-static/resources/view/transmission.js": {
    "4": "'require uci';",
    "26": "uci.load('transmission')",
    "30": "var port = uci.get_first('transmission', 'transmission', 'rpc_port') || '9091';",
    "34": "var webinstalled = res[1] || !!uci.get_first('transmission', 'transmission', 'web_home');"
  },
  "luci/applications/luci-app-travelmate/htdocs/luci-static/resources/view/travelmate/overview.js": {
    "6": "'require uci';",
    "16": "ifaceValue = String(uci.get('travelmate', 'global', 'trm_iface') || 'trm_wwan');",
    "22": "ifaceValue = String(uci.get('travelmate', 'global', 'trm_iface') || '');",
    "72": "uci.load('wireless')",
    "75": "w_sections = uci.sections('wireless', 'wifi-iface'),",
    "141": "uci.load('travelmate')"
  },
  "luci/applications/luci-app-travelmate/htdocs/luci-static/resources/view/travelmate/stations.js": {
    "6": "'require uci';",
    "17": "w_device = uci.get('wireless', sid, 'device');",
    "18": "w_ssid = uci.get('wireless', sid, 'ssid');",
    "19": "w_bssid = uci.get('wireless', sid, 'bssid');",
    "20": "t_sections = uci.sections('travelmate', 'uplink');",
    "27": "uci.set('travelmate', t_sections[i]['.name'], 'enabled', value);",
    "28": "uci.save().then(function () {",
    "44": "uci.remove('wireless', sid);",
    "45": "w_sections = uci.sections('wireless', 'wifi-iface');",
    "46": "t_sections = uci.sections('travelmate', 'uplink');",
    "56": "uci.remove('travelmate', t_sections[i]['.name']);",
    "59": "return uci.save().then(function () {",
    "71": "w_sections = uci.sections('wireless', 'wifi-iface');",
    "72": "t_sections = uci.sections('travelmate', 'uplink');",
    "86": "var vpn_stdservice = uci.get('travelmate', 'global', 'trm_stdvpnservice');",
    "87": "var vpn_stdiface = uci.get('travelmate', 'global', 'trm_stdvpniface');",
    "88": "var sid = uci.add('travelmate', 'uplink');",
    "90": "uci.set('travelmate', sid, 'enabled', '1');",
    "91": "uci.set('travelmate', sid, 'device', w_sections[i].device);",
    "92": "uci.set('travelmate', sid, 'ssid', w_sections[i].ssid);",
    "93": "uci.set('travelmate', sid, 'bssid', w_sections[i].bssid);",
    "94": "uci.set('travelmate', sid, 'con_start_expiry', '0');",
    "95": "uci.set('travelmate', sid, 'con_end_expiry', '0');",
    "97": "uci.set('travelmate', sid, 'vpn', '1');",
    "98": "uci.set('travelmate', sid, 'vpnservice', vpn_stdservice);",
    "99": "uci.set('travelmate', sid, 'vpniface', vpn_stdiface);",
    "111": "w_device = uci.get('wireless', section_id, 'device');",
    "112": "w_ssid = uci.get('wireless', section_id, 'ssid');",
    "113": "w_bssid = uci.get('wireless', section_id, 'bssid');",
    "114": "t_sections = uci.sections('travelmate', 'uplink');",
    "126": "uci.set('travelmate', t_sections[i]['.name'], 'con_end', date);",
    "129": "uci.unset('travelmate', t_sections[i]['.name'], 'con_end');",
    "132": "return uci.set('travelmate', t_sections[i]['.name'], option, value);",
    "135": "return uci.unset('travelmate', t_sections[i]['.name'], option);",
    "155": "uci.unload('wireless');",
    "156": "uci.unload('travelmate');",
    "159": "uci.load('wireless'),",
    "160": "uci.load('travelmate')",
    "182": "w_sections = uci.sections('wireless', 'wifi-iface'),",
    "233": "uci.load('wireless'),",
    "234": "uci.load('travelmate')",
    "240": "iface = uci.get('travelmate', 'global', 'trm_iface') || 'trm_wwan';",
    "251": "return (uci.get('wireless', section_id, 'network') == iface && uci.get('wireless', section_id, 'mode') == 'sta');",
    "285": "o.uciconfig = 'travelmate';",
    "286": "o.ucisection = 'uplink';",
    "287": "o.ucioption = 'enabled';",
    "497": "o.uciconfig = 'travelmate';",
    "498": "o.ucisection = 'uplink';",
    "499": "o.ucioption = 'ssid';",
    "508": "o.uciconfig = 'travelmate';",
    "509": "o.ucisection = 'uplink';",
    "510": "o.ucioption = 'bssid';",
    "519": "o.uciconfig = 'travelmate';",
    "520": "o.ucisection = 'uplink';",
    "521": "o.ucioption = 'con_start';",
    "530": "o.uciconfig = 'travelmate';",
    "531": "o.ucisection = 'uplink';",
    "532": "o.ucioption = 'con_end';",
    "543": "o.uciconfig = 'travelmate';",
    "544": "o.ucisection = 'uplink';",
    "545": "o.ucioption = 'opensta';",
    "565": "o.uciconfig = 'travelmate';",
    "566": "o.ucisection = 'uplink';",
    "567": "o.ucioption = 'macaddr';",
    "585": "o.uciconfig = 'travelmate';",
    "586": "o.ucisection = 'uplink';",
    "587": "o.ucioption = 'con_start_expiry';",
    "603": "o.uciconfig = 'travelmate';",
    "604": "o.ucisection = 'uplink';",
    "605": "o.ucioption = 'con_end_expiry';",
    "623": "o.uciconfig = 'travelmate';",
    "624": "o.ucisection = 'uplink';",
    "625": "o.ucioption = 'script';",
    "659": "o.uciconfig = 'travelmate';",
    "660": "o.ucisection = 'uplink';",
    "661": "o.ucioption = 'script_args';",
    "681": "o.uciconfig = 'travelmate';",
    "682": "o.ucisection = 'uplink';",
    "683": "o.ucioption = 'vpn';",
    "699": "o.uciconfig = 'travelmate';",
    "700": "o.ucisection = 'uplink';",
    "701": "o.ucioption = 'vpnservice';",
    "713": "o.uciconfig = 'travelmate';",
    "714": "o.ucisection = 'uplink';",
    "715": "o.ucioption = 'vpniface';",
    "897": "this.renderUCISection('_add_trm')",
    "1058": "var w_sections = uci.sections('wireless', 'wifi-iface'),",
    "1102": "while (uci.get('wireless', new_sid)) {",
    "1105": "uci.add('wireless', 'wifi-iface', new_sid);",
    "1106": "uci.set('wireless', new_sid, 'device', device);",
    "1107": "uci.set('wireless', new_sid, 'mode', 'sta');",
    "1108": "uci.set('wireless', new_sid, 'network', network);",
    "1109": "uci.set('wireless', new_sid, 'ssid', ssid);",
    "1111": "uci.set('wireless', new_sid, 'bssid', bssid);",
    "1113": "uci.set('wireless', new_sid, 'encryption', encryption);",
    "1115": "uci.set('wireless', new_sid, 'eap_type', eap_type);",
    "1116": "uci.set('wireless', new_sid, 'auth', auth);",
    "1117": "uci.set('wireless', new_sid, 'identity', identity);",
    "1118": "uci.set('wireless', new_sid, 'anonymous_identity', anonymous_identity);",
    "1119": "uci.set('wireless', new_sid, 'password', password);",
    "1120": "uci.set('wireless', new_sid, 'ca_cert_usesystem', ca_cert_usesystem);",
    "1121": "uci.set('wireless', new_sid, 'ca_cert', ca_cert);",
    "1122": "uci.set('wireless', new_sid, 'ieee80211w', ieee80211w);",
    "1124": "uci.set('wireless', new_sid, 'client_cert', client_cert);",
    "1125": "uci.set('wireless', new_sid, 'priv_key', priv_key);",
    "1126": "uci.set('wireless', new_sid, 'priv_key_pwd', priv_key_pwd);",
    "1129": "uci.set('wireless', new_sid, 'key', password);",
    "1131": "uci.set('wireless', new_sid, 'disabled', '1');",
    "1133": "uci.save()"
  },
  "luci/applications/luci-app-ttyd/htdocs/luci-static/resources/view/ttyd/config.js": {
    "34": "o.ucioption = 'interface';"
  },
  "luci/applications/luci-app-ttyd/htdocs/luci-static/resources/view/ttyd/term.js": {
    "3": "'require uci';",
    "7": "return uci.load('ttyd');",
    "10": "var port = uci.get_first('ttyd', 'ttyd', 'port') || '7681',",
    "11": "ssl = uci.get_first('ttyd', 'ttyd', 'ssl') || '0',",
    "12": "url = uci.get_first('ttyd', 'ttyd', 'url_override');"
  },
  "luci/applications/luci-app-uhttpd/htdocs/luci-static/resources/view/uhttpd/uhttpd.js": {
    "5": "'require\tuci';",
    "9": "return Promise.all([uci.load('uhttpd')]);",
    "114": "fs.remove(`${uci.get('uhttpd', 'main', 'cert')}`)",
    "115": ".then(() => fs.remove(`${uci.get('uhttpd', 'main', 'key')}`))",
    "127": "fs.remove(`${uci.get('uhttpd', 'main', 'cert')}`)",
    "128": ".then(() => fs.remove(`${uci.get('uhttpd', 'main', 'key')}`))",
    "130": "uci.unset('uhttpd', 'main', 'cert');",
    "131": "uci.unset('uhttpd', 'main', 'key');",
    "132": "uci.unset('uhttpd', 'main', 'listen_https');",
    "133": "return uci.save();"
  },
  "luci/applications/luci-app-unbound/htdocs/luci-static/resources/view/unbound/configure.js": {
    "5": "'require uci';",
    "23": "uci.load('unbound'),",
    "24": "uci.load('dhcp'),",
    "36": "const manual = uci.get('unbound', 'ub_main', 'manual_conf');",
    "37": "const dhcpLink = uci.get('unbound', 'ub_main', 'dhcp_link');",
    "38": "const leasetrig = uci.get('dhcp', 'odhcpd', 'leasetrigger') || 'undefined';",
    "41": "ui.addTimeLimitedNotification(null, E('p', _('Note: local DNS is configured to look at odhpcd, but odhpcd UCI lease trigger is incorrectly set:') +",
    "59": "_('Skip UCI and use /etc/unbound/unbound.conf'));",
    "290": "const enabled = uci.get('unbound', 'ub_main', 'enabled');",
    "295": "document.removeEventListener('uci-applied', Fn);",
    "297": "document.addEventListener('uci-applied', Fn);"
  },
  "luci/applications/luci-app-unbound/htdocs/luci-static/resources/view/unbound/files.js": {
    "5": "'require uci';",
    "11": "edituci: '/etc/config/unbound',",
    "31": "uci.load('unbound'),",
    "38": "render([ub_uci, adb_c, dhcp_c, manual_show_c]) {",
    "47": "const manual = uci.get('unbound', 'ub_main', 'manual_conf');",
    "54": "s.tab('edituci', _('Edit: UCI'));",
    "55": "const eu_msg = s.taboption('edituci', form.DummyValue, '_eu_msg', '');",
    "57": "eu_msg.default = _(\"Edit '\" + FILENAMES['edituci'] + \"' and recipes can be found in OpenWrt \" +",
    "60": "const eu = s.taboption('edituci', form.TextValue, 'edituci');",
    "62": "eu.load = () => fs_read(FILENAMES['edituci']);",
    "64": "fs_write(FILENAMES['edituci'], value);",
    "70": "man_msg.default = _(\"This shows '\" + FILENAMES['manual_show'] + \"' generated from UCI configuration.\");",
    "81": "man_msg.default = _(\"Edit '\" + FILENAMES['manual_edit'] + \"' when you do not use UCI.\");",
    "151": "const enabled = uci.get('unbound', 'ub_main', 'enabled');",
    "156": "document.removeEventListener('uci-applied', Fn);",
    "158": "document.addEventListener('uci-applied', Fn);"
  },
  "luci/applications/luci-app-unbound/htdocs/luci-static/resources/view/unbound/zone-details.js": {
    "5": "'require uci';",
    "18": "uci.load('unbound'),",
    "27": "uci.sections('unbound', 'zone').forEach(s => {",
    "111": "const enabled = uci.get('unbound', zoneId, 'enabled');",
    "116": "document.removeEventListener('uci-applied', Fn);",
    "119": "document.addEventListener('uci-applied', Fn);"
  },
  "luci/applications/luci-app-unbound/htdocs/luci-static/resources/view/unbound/zones.js": {
    "5": "'require uci';",
    "26": "uci.load('unbound'),",
    "38": "daemon_enabled = uci.get('unbound', 'ub_main', 'enabled');",
    "56": "const type = uci.get('unbound', section_id, 'zone_type');",
    "57": "const tls = uci.get('unbound', section_id, 'tls_upstream');",
    "67": "const type = uci.get('unbound', section_id, 'zone_type');",
    "68": "const raw = uci.get('unbound', section_id, 'zone_name');",
    "86": "const servers = uci.get('unbound', section_id, 'server');",
    "87": "const url = uci.get('unbound', section_id, 'url_dir');",
    "88": "const type = uci.get('unbound', section_id, 'zone_type');",
    "89": "const tls = uci.get('unbound', section_id, 'tls_upstream');",
    "90": "const tlsName = uci.get('unbound', section_id, 'tls_index');",
    "91": "const useResolv = uci.get('unbound', section_id, 'resolv_conf');",
    "127": "let _temp = uci.get('unbound', section_id, 'enabled');",
    "139": "document.removeEventListener('uci-applied', Fn);",
    "141": "document.addEventListener('uci-applied', Fn);"
  },
  "luci/applications/luci-app-upnp/htdocs/luci-static/resources/view/status/include/80_upnp.js": {
    "5": "'require uci';"
  },
  "luci/applications/luci-app-upnp/htdocs/luci-static/resources/view/upnp/upnp.js": {
    "5": "'require uci';",
    "41": "uci.load('upnpd')"
  },
  "luci/applications/luci-app-usteer/htdocs/luci-static/resources/view/usteer/usteer.js": {
    "8": "'require uci';"
  },
  "luci/applications/luci-app-v2raya/htdocs/luci-static/resources/view/v2raya/config.js": {
    "5": "'require uci';",
    "42": "uci.load('v2raya')",
    "48": "var webport = (uci.get(data[0], 'config', 'address') || '0.0.0.0:2017').split(':').slice(-1)[0];"
  },
  "luci/applications/luci-app-v2raya/htdocs/luci-static/resources/view/v2raya/log.js": {
    "5": "'require uci';"
  },
  "luci/applications/luci-app-vnstat2/htdocs/luci-static/resources/view/vnstat2/config.js": {
    "7": "'require uci';",
    "67": "var configInterfaces = uci.get_first('vnstat', 'vnstat', 'interface') || [];"
  },
  "luci/applications/luci-app-vnstat2/htdocs/luci-static/resources/view/vnstat2/graphs.js": {
    "8": "'require uci';",
    "93": "uci.load('vnstat'),",
    "98": "var ifaces = uci.get_first('vnstat', 'vnstat', 'interface') || [];"
  },
  "luci/applications/luci-app-wifischedule/htdocs/luci-static/resources/view/wifischedule/wifischedule.js": {
    "21": "'require uci';",
    "101": "let mod = uci.get('wifi_schedule', section, 'modules');",
    "107": "return uci.set('wifi_schedule', section, 'modules', valueList);",
    "170": "document.removeEventListener('uci-applied',Fn);",
    "172": "document.addEventListener('uci-applied', Fn);"
  },
  "luci/applications/luci-app-wol/htdocs/luci-static/resources/view/wol.js": {
    "4": "'require uci';",
    "25": "uci.load('etherwake')",
    "55": "o.default = uci.get('etherwake', 'setup', 'interface');",
    "60": "uci.sections('etherwake', 'target', function(section) {"
  },
  "luci/applications/luci-app-xfrpc/htdocs/luci-static/resources/view/xfrpc.js": {
    "113": "ui.addValidator(nameEl, 'uciname', true, function(v) {"
  },
  "luci/applications/luci-app-xinetd/htdocs/luci-static/resources/view/xinetd/xinetd.js": {
    "2": "'require uci';",
    "58": "return (uci.get('xinetd', section, 'flags') == \"IPv6\") ? _(\"yes\") : _(\"no\");",
    "67": "return (uci.get('xinetd', section, 'disable') == \"no\") ? _(\"yes\") : _(\"no\");",
    "166": "var redirect = uci.get(this.config, section_id, 'redirect');",
    "186": "uci.set('xinetd', section, 'server', value);"
  },
  "luci/contrib/package/ucode-mod-html/src/html.c": {
    "578": "{ \"Ucirc\", 0x000000db00000000ULL },",
    "2040": "{ \"ucirc\", 0x000000fb00000000ULL },"
  },
  "luci/libs/luci-lib-nixio/axTLS/crypto/aes.c": {
    "167": "/* Perform doubling in Galois Field GF(2^8) using the irreducible polynomial"
  },
  "luci/libs/rpcd-mod-luci/src/luci.c": {
    "49": "#include <uci.h>",
    "393": "find_leasefiles(struct uci_context *uci, bool is_odhcpd)",
    "395": "struct uci_ptr ptr = { .package = \"dhcp\" };",
    "396": "struct uci_package *pkg = NULL;",
    "397": "struct uci_section *s;",
    "398": "struct uci_element *e;",
    "401": "pkg = uci_lookup_package(uci, ptr.package);",
    "404": "uci_load(uci, ptr.package, &pkg);",
    "410": "uci_foreach_element(&pkg->sections, e) {",
    "411": "s = uci_to_section(e);",
    "424": "if (uci_lookup_ptr(uci, &ptr, NULL, true) || ptr.o == NULL)",
    "427": "if (ptr.o->type != UCI_TYPE_STRING)",
    "453": "struct uci_context *uci;",
    "457": "uci = uci_alloc_context();",
    "459": "if (!uci)",
    "464": "if (!find_leasefiles(uci, false))",
    "467": "if (!find_leasefiles(uci, true))",
    "470": "uci_free_context(uci);",
    "1189": "#define HOST_HINT_PRIO_STATIC_LEASE 250 /* uci static leases */",
    "1445": "rpc_luci_get_host_hints_uci(struct reply_context *rctx)",
    "1447": "struct uci_ptr ptr = { .package = \"dhcp\" };",
    "1448": "struct uci_context *uci = NULL;",
    "1449": "struct uci_package *pkg = NULL;",
    "1452": "struct uci_element *e, *l;",
    "1453": "struct uci_section *s;",
    "1458": "uci = uci_alloc_context();",
    "1460": "if (!uci)",
    "1463": "uci_load(uci, ptr.package, &pkg);",
    "1468": "uci_foreach_element(&pkg->sections, e)",
    "1470": "s = uci_to_section(e);",
    "1481": "if (!uci_lookup_ptr(uci, &ptr, NULL, true) && ptr.o != NULL &&",
    "1482": "ptr.o->type != UCI_TYPE_STRING)",
    "1493": "if (!uci_lookup_ptr(uci, &ptr, NULL, true) && ptr.o != NULL &&",
    "1494": "ptr.o->type == UCI_TYPE_STRING)",
    "1502": "if (uci_lookup_ptr(uci, &ptr, NULL, true) || ptr.o == NULL)",
    "1505": "if (ptr.o->type == UCI_TYPE_STRING) {",
    "1521": "else if (ptr.o->type == UCI_TYPE_LIST) {",
    "1522": "uci_foreach_element(&ptr.o->v.list, l) {",
    "1562": "if (uci)",
    "1563": "uci_free_context(uci);",
    "1804": "rpc_luci_get_host_hints_uci(rctx);"
  },
  "luci/modules/luci-base/htdocs/luci-static/resources/firewall.js": {
    "2": "'require uci';",
    "8": "return L.resolveDefault(uci.load('firewall'));",
    "35": "var z = uci.get('firewall', name);",
    "40": "var sections = uci.sections('firewall', 'zone');",
    "92": "z = uci.add('firewall', 'zone');",
    "94": "uci.set('firewall', z, 'name',    name);",
    "95": "uci.set('firewall', z, 'input',   d.getInput()   || 'DROP');",
    "96": "uci.set('firewall', z, 'output',  d.getOutput()  || 'DROP');",
    "97": "uci.set('firewall', z, 'forward', d.getForward() || 'DROP');",
    "111": "var sections = uci.sections('firewall', 'zone'),",
    "125": "var sections = uci.sections('firewall', 'zone');",
    "137": "var section = uci.get('firewall', name),",
    "143": "uci.remove('firewall', section['.name']);",
    "146": "var sections = uci.sections('firewall', 'zone');",
    "153": "uci.remove('firewall', sections[i]['.name']);",
    "158": "sections = uci.sections('firewall');",
    "167": "uci.remove('firewall', sections[i]['.name']);",
    "183": "var sections = uci.sections('firewall', 'zone'),",
    "190": "uci.set('firewall', sections[i]['.name'], 'name', newName);",
    "195": "sections = uci.sections('firewall');",
    "204": "uci.set('firewall', sections[i]['.name'], 'src', newName);",
    "207": "uci.set('firewall', sections[i]['.name'], 'dest', newName);",
    "243": "return uci.get('firewall', this.sid, option);",
    "247": "return uci.set('firewall', this.sid, option, value);",
    "254": "var sections = uci.sections('firewall', 'defaults');",
    "262": "this.sid = uci.add('firewall', 'defaults');",
    "289": "var section = uci.get('firewall', name);",
    "296": "var sections = uci.get('firewall', 'zone');",
    "334": "var section = uci.get('network', network);",
    "379": "var sections = uci.sections('firewall', 'forwarding'),",
    "406": "var sid = uci.add('firewall', 'forwarding');",
    "408": "uci.set('firewall', sid, 'src', this.getName());",
    "409": "uci.set('firewall', sid, 'dest', zone.getName());",
    "425": "var sid = uci.add('firewall', 'forwarding');",
    "427": "uci.set('firewall', sid, 'src', zone.getName());",
    "428": "uci.set('firewall', sid, 'dest', this.getName());",
    "434": "var sections = uci.sections('firewall', 'forwarding'),",
    "444": "uci.remove('firewall', sections[i]['.name']);",
    "455": "var section = uci.get('firewall', forwarding.sid);",
    "460": "uci.remove('firewall', section['.name']);",
    "466": "var sid = uci.add('firewall', 'redirect');",
    "471": "uci.set('firewall', sid, key, options[key]);",
    "473": "uci.set('firewall', sid, 'src', this.getName());",
    "479": "var sid = uci.add('firewall', 'rule');",
    "484": "uci.set('firewall', sid, key, options[key]);",
    "486": "uci.set('firewall', sid, 'src', this.getName());"
  },
  "luci/modules/luci-base/htdocs/luci-static/resources/form.js": {
    "3": "'require uci';",
    "182": "return uci.move.apply(this, [config, section_id1, section_id2, after]);",
    "353": "* The `Map` class represents one complete form. A form usually maps one UCI",
    "360": "* The UCI configuration to map. It is automatically loaded along with the",
    "379": "this.data = uci;",
    "389": "* uci configuration upon loading and mark the form readonly if no write",
    "475": "* Tie another UCI configuration to the map.",
    "477": "* By default, a map instance will only load the UCI configuration file",
    "480": "* use cases by registering further UCI configuration files which are",
    "484": "* The additional UCI configuration file to tie to the map. If the given",
    "495": "* LuCI forms follow the structure of the underlying UCI configurations.",
    "496": "* This means that a map, which represents a single UCI configuration, is",
    "500": "* While UCI itself only knows two kinds of sections - named and anonymous",
    "531": "* The `load()` function first loads all referenced UCI configurations,",
    "543": "const loadTasks = [ doCheckACL ? callSessionAccess('uci', this.config, 'write') : true ];",
    "584": "* This function parses the current form, saves the resulting UCI changes,",
    "585": "* reloads the UCI configuration data and redraws the form elements.",
    "589": "* but before the changed UCI data is saved. This is useful to perform",
    "698": "* The ID of the UCI section containing the option to look up. May be",
    "702": "* The name of the UCI configuration the option instance belongs to.",
    "703": "* Defaults to the main UCI configuration of the map if omitted.",
    "707": "* first item and the corresponding UCI section ID as second item.",
    "790": "* but uses a multidimensional JavaScript object instead of UCI configuration",
    "795": "* converted into an UCI-like format. Its top-level keys are treated like UCI",
    "860": "* Enumerate the UCI section IDs covered by this form section element.",
    "867": "* Returns an array of UCI section IDs covered by this form element.",
    "875": "* Filter UCI section IDs to render.",
    "877": "* The filter function is invoked for each UCI section ID of a given type",
    "878": "* and controls whether the given UCI section is rendered or ignored by",
    "887": "* The UCI section ID to test.",
    "890": "* Returns `true` when the given UCI section ID should be handled and",
    "1202": "renderUCISection(section_id) {",
    "1217": "const config_name = this.uciconfig ?? this.map.config;",
    "1397": "* Sets a default value to use when the underlying UCI option is not set.",
    "1431": "* Override the UCI configuration name to read the option value from.",
    "1438": "* @name LuCI.form.AbstractValue.prototype#uciconfig",
    "1444": "* Override the UCI section name to read the option value from.",
    "1451": "* @name LuCI.form.AbstractValue.prototype#ucisection",
    "1457": "* Override the UCI option name to read the value from.",
    "1460": "* the constructor, is used as UCI option name. By setting this property,",
    "1461": "* a deviating UCI option may be specified.",
    "1465": "* @name LuCI.form.AbstractValue.prototype#ucioption",
    "1667": "this.uciconfig ?? this.section.uciconfig ?? this.map.config,",
    "1668": "this.ucisection ?? section_id,",
    "1701": "const config_name = this.uciconfig ?? this.section.uciconfig ?? this.map.config;",
    "1715": "const config_name = this.uciconfig ?? this.section.uciconfig ?? this.map.config;",
    "1763": "this.uciconfig ?? this.section.uciconfig ?? this.map.config,",
    "1771": "* underlying UCI option value (or the related JavaScript property for",
    "1791": "this.uciconfig ?? this.section.uciconfig ?? this.map.config,",
    "1792": "this.ucisection ?? section_id,",
    "1793": "this.ucioption ?? this.option);",
    "2052": "* UCI configuration (or the associated JavaScript object property in",
    "2065": "this.uciconfig ?? this.section.uciconfig ?? this.map.config,",
    "2066": "this.ucisection ?? section_id,",
    "2067": "this.ucioption ?? this.option,",
    "2079": "* UCI configuration (or the associated JavaScript object property in",
    "2087": "const this_cfg = this.uciconfig ?? this.section.uciconfig ?? this.map.config;",
    "2088": "const this_sid = this.ucisection ?? section_id;",
    "2089": "const this_opt = this.ucioption ?? this.option;",
    "2094": "if (sibling === this || sibling.ucioption == null)",
    "2097": "const sibling_cfg = sibling.uciconfig ?? sibling.section.uciconfig ?? sibling.map.config;",
    "2098": "const sibling_sid = sibling.ucisection ?? section_id;",
    "2099": "const sibling_opt = sibling.ucioption ?? sibling.option;",
    "2107": "/* found another active option aliasing the same uci option name,",
    "2124": "* subset of the underlying UCI configuration sections of a given type.",
    "2137": "* The type of the UCI section to map.",
    "2160": "* UCI sections, which means that section instance elements will be",
    "2193": "* Override the UCI configuration name to read the section IDs from. By",
    "2198": "* @name LuCI.form.TypedSection.prototype#uciconfig",
    "2205": "return this.map.data.sections(this.uciconfig ?? this.map.config, this.sectiontype)",
    "2212": "const config_name = this.uciconfig ?? this.map.config;",
    "2220": "const config_name = this.uciconfig ?? this.map.config;",
    "2232": "const config_name = this.uciconfig ?? this.map.config;",
    "2269": "ui.addValidator(nameEl, 'uciname', true, (v) => {",
    "2294": "const config_name = this.uciconfig ?? this.map.config;",
    "2349": "renderTasks.push(this.renderUCISection(cfgsections[i]));",
    "2363": "* subset of the underlying UCI configuration sections of a given type.",
    "2376": "* The type of the UCI section to map.",
    "2391": "* the underlying UCI section as first argument. Set to a function, the",
    "2395": "* UCI configuration section.",
    "2406": "* of the underlying UCI section as first argument. Set to a function,",
    "2410": "* UCI configuration section.",
    "2454": "* as a `String.format()` pattern with the name of the underlying UCI section",
    "2506": "let config_name = this.uciconfig || this.map.config;",
    "2515": "const config_name = this.uciconfig ?? this.map.config;",
    "2677": "const config_name = this.uciconfig ?? this.map.config;",
    "2825": "const config_name = this.uciconfig ?? this.map.config;",
    "2982": "this.uciconfig ?? this.map.config,",
    "3064": "const config_name = this.uciconfig ?? this.map.config;",
    "3132": "* The ID of the underlying UCI section the modal popup belongs to.",
    "3302": "* subset of the underlying UCI configuration sections of a given type.",
    "3326": "* The type of the UCI section to map.",
    "3369": "const config_name = this.uciconfig ?? this.map.config;",
    "3389": "const config_name = this.uciconfig ?? this.map.config;",
    "3402": "renderUCISection(section_id) {",
    "3476": "* The `NamedSection` class maps exactly one UCI section instance which is",
    "3487": "* The name (ID) of the UCI section to map.",
    "3490": "* The type of the UCI section to map.",
    "3517": "* Override the UCI configuration name to read the section IDs from. By",
    "3522": "* @name LuCI.form.NamedSection.prototype#uciconfig",
    "3542": "const config_name = this.uciconfig ?? this.map.config;",
    "3551": "const config_name = this.uciconfig ?? this.map.config;",
    "3559": "const ucidata = data[0];",
    "3562": "const config_name = this.uciconfig ?? this.map.config;",
    "3565": "'id': ucidata ? null : 'cbi-%s-%s'.format(config_name, section_id),",
    "3577": "if (ucidata) {",
    "3611": "const config_name = this.uciconfig ?? this.map.config;",
    "3616": "this.renderUCISection(section_id)",
    "3645": "* The name of the UCI option to map.",
    "3717": "const config_name = this.uciconfig ?? this.section.uciconfig ?? this.map.config;",
    "3858": "* The name of the UCI option to map.",
    "3925": "* The name of the UCI option to map.",
    "4018": "* The name of the UCI option to map.",
    "4147": "* The name of the UCI option to map.",
    "4294": "* The name of the UCI option to map.",
    "4452": "* The name of the UCI option to map.",
    "4541": "* The name of the UCI option to map.",
    "4620": "* renders the underlying UCI option or default value as readonly text.",
    "4635": "* The name of the UCI option to map.",
    "4658": "* Treat the UCI option value (or the `default` property value) as HTML.",
    "4670": "* Render the UCI option value as hidden using the HTML 'display: none'",
    "4714": "* renders the underlying UCI option or default value as readonly text.",
    "4729": "* The name of the UCI option to map.",
    "4746": "* the underlying UCI section name passed as first format argument. When",
    "4777": "* By default, the underlying UCI option (or default property) value is",
    "4852": "* The name of the UCI option to map.",
    "4896": "* The name of the UCI option to map.",
    "5038": "* is only used internally and does not need to relate to any underlying UCI",
    "5103": "* Since the section container is not tied to any UCI configuration,",
    "5111": "* Since the section container is not tied to any UCI configuration,",
    "5119": "* Since the section container is not tied to any UCI configuration,",
    "5128": "* Since the section container is not tied to any UCI configuration,",
    "5144": "* UCI- or JSON backed configurations forms."
  },
  "luci/modules/luci-base/htdocs/luci-static/resources/luci.js": {
    "2648": "})('uci', 'luci', 'read').catch(LuCI.prototype.notifySessionExpiry);"
  },
  "luci/modules/luci-base/htdocs/luci-static/resources/network.js": {
    "2": "'require uci';",
    "130": "var s = uci.get('wireless', sid);",
    "140": "var s2 = uci.get('wireless', netstate.section);",
    "182": "var sections = uci.sections('wireless', 'wifi-iface');",
    "210": "var s = uci.get('wireless', sid);",
    "214": "var sections = uci.sections('wireless', 'wifi-iface');",
    "234": "var sections = uci.sections('wireless', 'wifi-iface');",
    "268": "var values = uci.get(config, section, option),",
    "280": "uci.set(config, section, option, isArray ? values : values.join(' '));",
    "286": "var values = uci.get(config, section, option),",
    "301": "uci.set(config, section, option, isArray ? values : values.join(' '));",
    "303": "uci.unset(config, section, option);",
    "360": "L.resolveDefault(uci.load('network')),",
    "361": "hasWifi ? L.resolveDefault(uci.load('wireless')) : L.resolveDefault(),",
    "362": "L.resolveDefault(uci.load('luci'))",
    "620": "var uciInterfaces = uci.sections('network', 'interface'),",
    "623": "for (var i = 0; i < uciInterfaces.length; i++)",
    "624": "networks[uciInterfaces[i]['.name']] = this.instantiateNetwork(uciInterfaces[i]['.name']);",
    "895": "* uci option values.",
    "904": "* An object of uci option values to set on the new network or to",
    "916": "var sid = uci.add('network', 'interface', name);",
    "922": "uci.set('network', sid, key, options[key]);",
    "952": "var section = (name != null) ? uci.get('network', name) : null;",
    "993": "loadDHCP = L.resolveDefault(uci.load('dhcp')),",
    "997": "var uciInterface = uci.get('network', name),",
    "1000": "if (uciInterface != null && uciInterface['.type'] == 'interface') {",
    "1002": "uci.remove('network', name);",
    "1004": "uci.sections('luci', 'ifstate', function(s) {",
    "1006": "uci.remove('luci', s['.name']);",
    "1009": "uci.sections('network', null, function(s) {",
    "1015": "uci.remove('network', s['.name']);",
    "1022": "uci.remove('network', s['.name']);",
    "1028": "uci.sections('wireless', 'wifi-iface', function(s) {",
    "1032": "uci.set('wireless', s['.name'], 'network', networks.join(' '));",
    "1034": "uci.unset('wireless', s['.name'], 'network');",
    "1037": "uci.sections('dhcp', 'dhcp', function(s) {",
    "1039": "uci.remove('dhcp', s['.name']);",
    "1073": "if (newName == null || !/^[a-zA-Z0-9_]+$/.test(newName) || uci.get('network', newName) != null)",
    "1076": "var oldNetwork = uci.get('network', oldName);",
    "1081": "var sid = uci.add('network', 'interface', newName);",
    "1085": "uci.set('network', sid, key, oldNetwork[key]);",
    "1087": "uci.sections('luci', 'ifstate', function(s) {",
    "1089": "uci.set('luci', s['.name'], 'interface', newName);",
    "1092": "uci.sections('network', 'alias', function(s) {",
    "1094": "uci.set('network', s['.name'], 'interface', newName);",
    "1097": "uci.sections('network', 'route', function(s) {",
    "1099": "uci.set('network', s['.name'], 'interface', newName);",
    "1102": "uci.sections('network', 'route6', function(s) {",
    "1104": "uci.set('network', s['.name'], 'interface', newName);",
    "1107": "uci.sections('wireless', 'wifi-iface', function(s) {",
    "1111": "uci.set('wireless', s['.name'], 'network', networks.join(' '));",
    "1114": "uci.remove('network', oldName);",
    "1160": "var uciInterfaces = uci.sections('network', 'interface');",
    "1161": "for (var i = 0; i < uciInterfaces.length; i++) {",
    "1162": "var ifnames = L.toArray(uciInterfaces[i].ifname);",
    "1189": "var uciSwitchVLANs = uci.sections('network', 'switch_vlan');",
    "1190": "for (var i = 0; i < uciSwitchVLANs.length; i++) {",
    "1191": "if (typeof(uciSwitchVLANs[i].ports) != 'string' ||",
    "1192": "typeof(uciSwitchVLANs[i].device) != 'string' ||",
    "1193": "!_state.switches.hasOwnProperty(uciSwitchVLANs[i].device))",
    "1196": "var ports = uciSwitchVLANs[i].ports.split(/\\s+/);",
    "1202": "var netdev = _state.switches[uciSwitchVLANs[i].device].netdevs[m[1]];",
    "1214": "var vid = uciSwitchVLANs[i].vid || uciSwitchVLANs[i].vlan;",
    "1230": "var uciBridgeVLANs = uci.sections('network', 'bridge-vlan');",
    "1231": "for (var i = 0; i < uciBridgeVLANs.length; i++) {",
    "1232": "var basedev = uciBridgeVLANs[i].device,",
    "1233": "local = uciBridgeVLANs[i].local,",
    "1234": "alias = uciBridgeVLANs[i].alias,",
    "1235": "vid = +uciBridgeVLANs[i].vlan,",
    "1236": "ports = L.toArray(uciBridgeVLANs[i].ports);",
    "1283": "var uciWifiIfaces = uci.sections('wireless', 'wifi-iface'),",
    "1286": "for (var i = 0; i < uciWifiIfaces.length; i++) {",
    "1287": "if (typeof(uciWifiIfaces[i].device) != 'string')",
    "1290": "networkCount[uciWifiIfaces[i].device] = (networkCount[uciWifiIfaces[i].device] || 0) + 1;",
    "1292": "var netid = '%s.network%d'.format(uciWifiIfaces[i].device, networkCount[uciWifiIfaces[i].device]);",
    "1297": "/* find uci declared devices */",
    "1298": "var uciDevices = uci.sections('network', 'device');",
    "1300": "for (var i = 0; i < uciDevices.length; i++) {",
    "1301": "var type = uciDevices[i].type,",
    "1302": "name = uciDevices[i].name;",
    "1359": "var existingDevice = uci.get('wireless', devname);",
    "1379": "var uciWifiDevices = uci.sections('wireless', 'wifi-device'),",
    "1382": "for (var i = 0; i < uciWifiDevices.length; i++) {",
    "1383": "var devname = uciWifiDevices[i]['.name'];",
    "1396": "* The name of the wireless network to look up. This may be either an uci",
    "1422": "var wifiIfaces = uci.sections('wireless', 'wifi-iface'),",
    "1457": "var existingDevice = uci.get('wireless', options.device);",
    "1462": "var sid = uci.add('wireless', 'wifi-iface');",
    "1465": "uci.set('wireless', sid, key, options[key]);",
    "1495": "uci.remove('wireless', sid);",
    "1659": "proto = (proto == null ? (uci.get('network', name, 'proto') || 'none') : proto);",
    "1987": "* subclasses which describe logical UCI networks defined by `config",
    "1996": "var val = uci.get('network', this.sid, opt);",
    "2014": "* Read the given UCI option value of this network.",
    "2017": "* The UCI option name to read.",
    "2020": "* Returns the UCI option value or `null` if the requested option is",
    "2024": "return uci.get('network', this.sid, opt);",
    "2028": "* Set the given UCI option of this network to the given value.",
    "2031": "* The name of the UCI option to set.",
    "2038": "return uci.set('network', this.sid, opt, val);",
    "2102": "* to check whether the interface is declared as bridge in UCI.",
    "2575": "var ifnames = L.toArray(uci.get('network', this.sid, 'device')),",
    "2699": "var ifnames = L.toArray(uci.get('network', this.sid, 'device'));",
    "2754": "var device = uci.get('network', this.sid, 'device');",
    "2762": "var uciWifiIfaces = uci.sections('wireless', 'wifi-iface');",
    "2764": "for (var i = 0; i < uciWifiIfaces.length; i++) {",
    "2765": "if (typeof(uciWifiIfaces[i].device) != 'string')",
    "2768": "var networks = L.toArray(uciWifiIfaces[i].network);",
    "2774": "var netid = getWifiNetidBySid(uciWifiIfaces[i]['.name']);",
    "2809": "var name = uci.get('network', this.sid, 'device');",
    "2819": "var networks = L.toArray(uci.get('wireless', wif, 'network'));",
    "2834": "* cleanup tasks, such as unsetting uci entries in related configurations.",
    "2876": "uci.sections('network', 'device', function(s) {",
    "3312": "var uciWifiDevice = uci.get('wireless', name);",
    "3314": "if (uciWifiDevice != null &&",
    "3315": "uciWifiDevice['.type'] == 'wifi-device' &&",
    "3316": "uciWifiDevice['.name'] != null) {",
    "3317": "this.sid    = uciWifiDevice['.name'];",
    "3341": "* Read the given UCI option value of this wireless device.",
    "3344": "* The UCI option name to read.",
    "3347": "* Returns the UCI option value or `null` if the requested option is",
    "3351": "return uci.get('wireless', this.sid, opt);",
    "3355": "* Set the given UCI option of this network to the given value.",
    "3358": "* The name of the UCI option to set.",
    "3365": "return uci.set('wireless', this.sid, opt, value);",
    "3374": "* UCI configuration.",
    "3384": "* Returns the UCI section name (e.g. `radio0`) of the corresponding",
    "3528": "* The name of the wireless network to look up. This may be either an uci",
    "3541": "var uciWifiIface = (networkInstance.sid ? uci.get('wireless', networkInstance.sid) : null);",
    "3543": "if (uciWifiIface == null || uciWifiIface['.type'] != 'wifi-iface' || uciWifiIface.device != this.sid)",
    "3596": "* The name of the wireless network to look up. This may be either an uci",
    "3614": "var uciWifiIface = uci.get('wireless', network);",
    "3616": "if (uciWifiIface == null || uciWifiIface['.type'] != 'wifi-iface')",
    "3620": "if (sid == null || uci.get('wireless', sid, 'device') != this.sid)",
    "3623": "uci.delete('wireless', network);",
    "3665": "* Read the given UCI option value of this wireless network.",
    "3668": "* The UCI option name to read.",
    "3671": "* Returns the UCI option value or `null` if the requested option is",
    "3675": "return uci.get('wireless', this.sid, opt);",
    "3679": "* Set the given UCI option of this network to the given value.",
    "3682": "* The name of the UCI option to set.",
    "3689": "return uci.set('wireless', this.sid, opt, value);",
    "3698": "* UCI configuration.",
    "3786": "* Returns the corresponding UCI section ID of the network.",
    "3880": "* Returns the human readable mode name as reported by iwinfo or uci mode.",
    "4402": "var uciInterface = uci.get('network', networkNames[i]);",
    "4404": "if (uciInterface == null || uciInterface['.type'] != 'interface')"
  },
  "luci/modules/luci-base/htdocs/luci-static/resources/uci.js": {
    "14": "* @class uci",
    "19": "* The `LuCI.uci` class utilizes {@link LuCI.rpc} to declare low level",
    "20": "* remote UCI `ubus` procedures and implements a local caching and data",
    "22": "* UCI configuration data.",
    "24": "return baseclass.extend(/** @lends LuCI.uci.prototype */ {",
    "39": "object: 'uci',",
    "47": "object: 'uci',",
    "54": "object: 'uci',",
    "62": "object: 'uci',",
    "69": "object: 'uci',",
    "76": "object: 'uci',",
    "83": "object: 'uci',",
    "94": "* by the remote `ubus` UCI api.",
    "165": "to their index value and issue an uci order call",
    "208": "* Loads the given UCI configurations from the remote `ubus` api.",
    "215": "* {@link LuCI.uci#unload uci.unload()} first.",
    "244": "document.dispatchEvent(new CustomEvent('uci-loaded'));",
    "251": "* Unloads the given UCI configurations from the local cache.",
    "388": "* @memberof LuCI.uci",
    "403": "* The `.type` property contains the type of the corresponding uci",
    "408": "* representing the uci option enclosed in the section.",
    "412": "* underlying option is an UCI list.",
    "420": "* @callback LuCI.uci~sectionsFn",
    "422": "* @param {LuCI.uci.SectionObject} section",
    "440": "* @param {LuCI.uci~sectionsFn} [cb]",
    "443": "* @returns {Array<LuCI.uci.SectionObject>}",
    "496": "* @returns {null|string|string[]|LuCI.uci.SectionObject}",
    "498": "*   plain UCI option.",
    "500": "*   case of `option` pointing to an UCI list.",
    "501": "* - Returns a {@link LuCI.uci.SectionObject section object} if",
    "655": "* `uci.set(config, section, option, null)`.",
    "687": "* @returns {null|string|string[]|LuCI.uci.SectionObject}",
    "689": "*   plain UCI option.",
    "691": "*   case of `option` pointing to an UCI list.",
    "692": "* - Returns a {@link LuCI.uci.SectionObject section object} if",
    "781": "* `uci.set_first(config, type, option, null)`.",
    "947": "array \"snew\" holds references to the created uci sections,",
    "964": "* Instructs the remote `ubus` UCI api to commit all saved changes with",
    "1004": "* An UCI change record is a plain array containing the change operation",
    "1010": "* @memberof LuCI.uci",
    "1047": "* Fetches uncommitted UCI changes from the remote `ubus` RPC api.",
    "1050": "* @returns {Promise<Object<string, Array<LuCI.uci.ChangeRecord>>>}",
    "1055": "object: 'uci',"
  },
  "luci/modules/luci-base/htdocs/luci-static/resources/ui.js": {
    "9": "'require uci';",
    "3812": "document.addEventListener('uci-loaded', this.changes.init.bind(this.changes));",
    "4695": "* confirming and reverting staged UCI changesets.",
    "4707": "return uci.changes().then(L.bind(this.renderChangeIndicator, this));",
    "4713": "* This function updates or hides the UCI change count indicator,",
    "4725": "UI.prototype.showIndicator('uci-changes',",
    "4730": "UI.prototype.hideIndicator('uci-changes');",
    "4737": "* This function updates the UCI change count indicator from the given",
    "4738": "* UCI changeset structure.",
    "4742": "* @param {Object<string, Array<LuCI.uci.ChangeRecord>>} changes",
    "4743": "* The UCI changeset to count.",
    "4758": "'add-3':      '<ins>uci add %0 <strong>%3</strong> # =%2</ins>',",
    "4759": "'set-3':      '<ins>uci set %0.<strong>%2</strong>=%3</ins>',",
    "4760": "'set-4':      '<var><ins>uci set %0.%2.%3=<strong>%4</strong></ins></var>',",
    "4761": "'remove-2':   '<del>uci del %0.<strong>%2</strong></del>',",
    "4762": "'remove-3':   '<var><del>uci del %0.%2.<strong>%3</strong></del></var>',",
    "4763": "'order-3':    '<var>uci reorder %0.%2=<strong>%3</strong></var>',",
    "4764": "'list-add-4': '<var><ins>uci add_list %0.%2.%3=<strong>%4</strong></ins></var>',",
    "4765": "'list-del-4': '<var><del>uci del_list %0.%2.%3=<strong>%4</strong></del></var>',",
    "4766": "'rename-3':   '<var>uci rename %0.%2=<strong>%3</strong></var>',",
    "4767": "'rename-4':   '<var>uci rename %0.%2.%3=<strong>%4</strong></var>'",
    "4773": "* Open a modal dialog visualizing the currently staged UCI changes",
    "4780": "const list = E('div', { 'class': 'uci-change-list' });",
    "4785": "E('div', { 'class': 'uci-change-legend' }, [",
    "4786": "E('div', { 'class': 'uci-change-legend-label' }, [",
    "4788": "E('div', { 'class': 'uci-change-legend-label' }, [",
    "4790": "E('div', { 'class': 'uci-change-legend-label' }, [",
    "4792": "E('div', { 'class': 'uci-change-legend-label' }, [",
    "4851": "dlg.classList.add('uci-dialog');",
    "4932": "request.request(L.url('admin/uci/confirm'), {",
    "4967": "document.dispatchEvent(new CustomEvent('uci-applied'));",
    "4984": "request.request(L.url('admin/uci/confirm'), {",
    "5064": "request.request(L.url('admin/uci', checked ? 'apply_rollback' : 'apply_unchecked'), {",
    "5112": "request.request(L.url('admin/uci/revert'), {",
    "5117": "document.dispatchEvent(new CustomEvent('uci-reverted'));"
  },
  "luci/modules/luci-base/htdocs/luci-static/resources/validation.js": {
    "407": "return this.assert(this.apply('uciname') || this.apply('hostname') || this.apply('ip4addr') || this.apply('ip6addr'),",
    "408": "_('valid UCI identifier, hostname or IP address range'));",
    "456": "uciname() {",
    "457": "return this.assert(this.value.match(/^[a-zA-Z0-9_]+$/), _('valid UCI identifier'));"
  },
  "luci/modules/luci-base/htdocs/luci-static/resources/tools/widgets.js": {
    "152": "? ( this.multiple ? 'list(or(uciname,\"*\"))' : 'or(uciname,\"*\")' )",
    "153": ": this.multiple ? 'list(or(and(uciname,maxlength(11)),\"*\"))' : 'or(and(uciname,maxlength(11)),\"*\")',",
    "416": "datatype: this.multiple ? 'list(uciname)' : 'uciname',"
  },
  "luci/modules/luci-base/src/contrib/lemon.c": {
    "1585": "/* Compute the follow set of every reducible configuration */"
  },
  "luci/modules/luci-compat/luasrc/cbi.lua": {
    "13": "local uci        = require(\"luci.model.uci\")",
    "90": "local uci = luci.model.uci.cursor()",
    "103": "local t = uci:get( c, s ) or s",
    "307": "self.uci = uci.cursor()",
    "312": "local path = \"%s/%s\" %{ self.uci:get_confdir(), self.config }",
    "317": "local ok, err = self.uci:load(self.config)",
    "323": "ok, err = self.uci:load(self.config)",
    "369": "-- Use optimized UCI writing",
    "393": "self.uci:save(config)",
    "400": "self.uci:commit(config)",
    "405": "self.uci:apply(self.apply_on_parse)",
    "418": "self.uci:unload(config)",
    "454": "-- UCI add",
    "456": "return self.uci:add(self.config, sectiontype)",
    "459": "-- UCI set",
    "463": "return self.uci:set(self.config, section, option, value)",
    "465": "return self.uci:set(self.config, section, value)",
    "472": "-- UCI del",
    "475": "return self.uci:delete(self.config, section, option)",
    "477": "return self.uci:delete(self.config, section)",
    "481": "-- UCI get",
    "484": "return self.uci:get_all(self.config)",
    "486": "return self.uci:get(self.config, section, option)",
    "488": "return self.uci:get_all(self.config, section)",
    "684": "SimpleForm - A Simple non-UCI form",
    "957": "-- Returns the section's UCI table",
    "1147": "-- Return all matching UCI sections for this TypedSection",
    "1150": "self.map.uci:foreach(self.map.config, self.sectiontype,",
    "1235": "self.map.uci:reorder(self.config, sids)",
    "1424": "if fvalue and #fvalue > 0 then -- If we have a form value, write it to UCI",
    "1446": "else\t\t\t\t\t\t\t-- Unset the UCI or error",
    "1477": "-- Return the UCI value of this object",
    "1522": "-- Write to UCI",
    "1527": "-- Remove from UCI"
  },
  "luci/modules/luci-compat/luasrc/cbi/datatypes.lua": {
    "237": "return uciname(val) or host(val)",
    "363": "function uciname(val)"
  },
  "luci/modules/luci-compat/luasrc/model/firewall.lua": {
    "9": "local uci = require \"luci.model.uci\"",
    "14": "local uci_r, uci_s",
    "21": "return uci_r:get(c, s, o)",
    "27": "return uci_r:set(c, s, o, v)",
    "29": "return uci_r:delete(c, s, o)",
    "35": "uci_r = cursor or uci_r or uci.cursor()",
    "36": "uci_s = uci_r:substate()",
    "42": "uci_r:save(...)",
    "43": "uci_r:load(...)",
    "47": "uci_r:commit(...)",
    "48": "uci_r:load(...)",
    "70": "local z = uci_r:section(\"firewall\", \"zone\", nil, {",
    "83": "if uci_r:get(\"firewall\", n) == \"zone\" then",
    "87": "uci_r:foreach(\"firewall\", \"zone\",",
    "102": "uci_r:foreach(\"firewall\", \"zone\",",
    "120": "uci_r:foreach(\"firewall\", \"zone\",",
    "139": "if uci_r:get(\"firewall\", n) == \"zone\" then",
    "140": "local z = uci_r:get(\"firewall\", n, \"name\")",
    "141": "r = uci_r:delete(\"firewall\", n)",
    "144": "uci_r:foreach(\"firewall\", \"zone\",",
    "147": "r = uci_r:delete(\"firewall\", s['.name'])",
    "154": "uci_r:foreach(\"firewall\", \"rule\",",
    "157": "uci_r:delete(\"firewall\", s['.name'])",
    "161": "uci_r:foreach(\"firewall\", \"redirect\",",
    "164": "uci_r:delete(\"firewall\", s['.name'])",
    "168": "uci_r:foreach(\"firewall\", \"forwarding\",",
    "171": "uci_r:delete(\"firewall\", s['.name'])",
    "183": "uci_r:foreach(\"firewall\", \"zone\",",
    "187": "uci_r:set(\"firewall\", s['.name'], \"network\", old)",
    "189": "uci_r:set(\"firewall\", s['.name'], \"name\", new)",
    "196": "uci_r:foreach(\"firewall\", \"rule\",",
    "199": "uci_r:set(\"firewall\", s['.name'], \"src\", new)",
    "202": "uci_r:set(\"firewall\", s['.name'], \"dest\", new)",
    "206": "uci_r:foreach(\"firewall\", \"redirect\",",
    "209": "uci_r:set(\"firewall\", s['.name'], \"src\", new)",
    "212": "uci_r:set(\"firewall\", s['.name'], \"dest\", new)",
    "216": "uci_r:foreach(\"firewall\", \"forwarding\",",
    "219": "uci_r:set(\"firewall\", s['.name'], \"src\", new)",
    "222": "uci_r:set(\"firewall\", s['.name'], \"dest\", new)",
    "243": "uci_r:foreach(\"firewall\", \"defaults\",",
    "249": "self.sid = self.sid or uci_r:section(\"firewall\", \"defaults\", nil, { })",
    "283": "if uci_r:get(\"firewall\", z) == \"zone\" then",
    "285": "self.data = uci_r:get_all(\"firewall\", z)",
    "287": "uci_r:foreach(\"firewall\", \"zone\",",
    "331": "if uci_r:get(\"network\", net) == \"interface\" then",
    "384": "uci_r:foreach(\"firewall\", \"forwarding\",",
    "405": "local s = uci_r:section(\"firewall\", \"forwarding\", nil, {",
    "425": "local s = uci_r:section(\"firewall\", \"forwarding\", nil, {",
    "437": "uci_r:delete_all(\"firewall\", \"forwarding\",",
    "447": "local s = uci_r:section(\"firewall\", \"redirect\", nil, options)",
    "455": "local s = uci_r:section(\"firewall\", \"rule\", nil, options)",
    "493": "return uci_r:get(\"firewall\", self.sid, \"src\")",
    "497": "return uci_r:get(\"firewall\", self.sid, \"dest\")",
    "525": "return uci_r:get(\"firewall\", self.sid, \"src\")",
    "529": "return uci_r:get(\"firewall\", self.sid, \"dest\")",
    "555": "return uci_r:get(\"firewall\", self.sid, \"src\")",
    "559": "return uci_r:get(\"firewall\", self.sid, \"dest\")"
  },
  "luci/modules/luci-compat/luasrc/model/network.lua": {
    "15": "local uci = require \"luci.model.uci\"",
    "49": "local _uci",
    "52": "local val = _uci:get(c, s, o)",
    "62": "_uci:set(c, s, o, table.concat(l, \" \"))",
    "64": "_uci:delete(c, s, o)",
    "73": "_uci:set(c, s, o, l)",
    "75": "_uci:delete(c, s, o)",
    "82": "local val = _uci:get(c, s, o) or \"\"",
    "91": "_uci:set(c, s, o, table.concat(l, \" \"))",
    "100": "_uci:set(c, s, o, l)",
    "113": "return _uci:get(c, s, o)",
    "119": "return _uci:set(c, s, o, v)",
    "121": "return _uci:delete(c, s, o)",
    "133": "local t1, n1 = _uci:get(\"wireless\", sid)",
    "145": "local t2, n2 = _uci:get(\"wireless\", netstate.section)",
    "226": "_uci:foreach(\"wireless\", \"wifi-iface\",",
    "255": "local t, n = _uci:get(\"wireless\", sid)",
    "257": "local radioname = _uci:get(\"wireless\", n, \"device\")",
    "261": "_uci:foreach(\"wireless\", \"wifi-iface\",",
    "280": "_uci:foreach(\"wireless\", \"wifi-iface\",",
    "315": "_uci = cursor or _uci or uci.cursor()",
    "459": "_uci:save(...)",
    "460": "_uci:load(...)",
    "464": "_uci:commit(...)",
    "465": "_uci:load(...)",
    "534": "if _uci:section(\"network\", \"interface\", n, options) then",
    "549": "if n and _uci:get(\"network\", n) == \"interface\" then",
    "565": "_uci:foreach(\"network\", \"interface\",",
    "596": "local r = _uci:delete(\"network\", n)",
    "598": "_uci:delete_all(\"luci\", \"ifstate\",",
    "601": "_uci:delete_all(\"network\", \"alias\",",
    "604": "_uci:delete_all(\"network\", \"route\",",
    "607": "_uci:delete_all(\"network\", \"route6\",",
    "610": "_uci:foreach(\"wireless\", \"wifi-iface\",",
    "620": "_uci:set(\"wireless\", s['.name'], \"network\",",
    "623": "_uci:delete(\"wireless\", s['.name'], \"network\")",
    "639": "r = _uci:section(\"network\", \"interface\", new, _uci:get_all(\"network\", old))",
    "642": "_uci:foreach(\"network\", \"alias\",",
    "645": "_uci:set(\"network\", s['.name'], \"interface\", new)",
    "649": "_uci:foreach(\"network\", \"route\",",
    "652": "_uci:set(\"network\", s['.name'], \"interface\", new)",
    "656": "_uci:foreach(\"network\", \"route6\",",
    "659": "_uci:set(\"network\", s['.name'], \"interface\", new)",
    "663": "_uci:foreach(\"wireless\", \"wifi-iface\",",
    "675": "_uci:set(\"wireless\", s['.name'], \"network\",",
    "680": "_uci:delete(\"network\", old)",
    "701": "_uci:foreach(\"network\", \"interface\",",
    "717": "_uci:foreach(\"network\", \"switch_vlan\",",
    "756": "_uci:foreach(\"wireless\", \"wifi-iface\",",
    "777": "if _uci:get(\"wireless\", dev) == \"wifi-device\" then",
    "786": "_uci:foreach(\"wireless\", \"wifi-device\",",
    "806": "_uci:get(\"wireless\", options.device) == \"wifi-device\"",
    "808": "local wnet = _uci:section(\"wireless\", \"wifi-iface\", nil, options)",
    "816": "_uci:delete(\"wireless\", wnet)",
    "908": "local p = proto or _uci:get(\"network\", name, \"proto\")",
    "919": "local v = _uci:get(\"network\", self.sid, opt)",
    "1176": "for ifn in utl.imatch(_uci:get(\"network\", self.sid, \"ifname\")) do",
    "1249": "for ifn in utl.imatch(_uci:get(\"network\", self.sid, \"ifname\")) do",
    "1275": "_uci:foreach(\"wireless\", \"wifi-iface\",",
    "1318": "for n in utl.imatch(_uci:get(\"wireless\", wif, \"network\")) do",
    "1539": "local t, n = _uci:get(\"wireless\", name)",
    "1595": "if _uci:get(\"wireless\", net) == \"wifi-iface\" then",
    "1608": "_uci:foreach(\"wireless\", \"wifi-iface\",",
    "1622": "local wnet = _uci:section(\"wireless\", \"wifi-iface\", nil, options)",
    "1631": "elseif _uci:get(\"wireless\", net) ~= \"wifi-iface\" then",
    "1635": "if net and _uci:get(\"wireless\", net, \"device\") == self.sid then",
    "1636": "_uci:delete(\"wireless\", net)",
    "1661": "-- lookup state by uci section id (e.g. cfg053579)",
    "1667": "-- no state available, try to resolve from uci",
    "1888": "if _uci:get(\"network\", net) == \"interface\" then"
  },
  "luci/modules/luci-compat/luasrc/tools/webadmin.lua": {
    "8": "local uci  = require \"luci.model.uci\"",
    "52": "uci.cursor():foreach(\"network\", \"interface\",",
    "74": "luci.model.uci.cursor():foreach(\"firewall\", \"zone\",",
    "91": "local cur = uci.cursor()",
    "97": "-- cross check with uci to filter out @name style aliases",
    "98": "local uciname = cur:get(\"network\", net.interface, \"ifname\")",
    "99": "if type(uciname) == \"string\" and uciname:sub(1,1) ~= \"@\" or uciname then"
  },
  "luci/modules/luci-lua-runtime/luasrc/config.lua": {
    "7": "if pcall(require, \"luci.model.uci\") then",
    "12": "config[key] = luci.model.uci.cursor():get_all(\"luci\", key)"
  },
  "luci/modules/luci-lua-runtime/luasrc/dispatcher.lua": {
    "21": "uci = require \"luci.model.uci\"",
    "22": "uci:set_session_id(_G.L.ctx.authsession)",
    "146": "if type(entry.uci_depends) == \"table\" then",
    "147": "for k, v in pairs(entry.uci_depends) do",
    "149": "entry.depends.uci = entry.depends.uci or {}",
    "150": "entry.depends.uci[k] = v",
    "175": "elseif modname == \"luci.controller.admin.uci\" then",
    "193": "entry.uci_depends = nil",
    "216": "local function has_uci_access(config, level)",
    "219": "scope = \"uci\", object = config,",
    "305": "local is_readable_map = has_uci_access(res.config, \"read\")",
    "306": "local is_writable_map = has_uci_access(res.config, \"write\")"
  },
  "luci/modules/luci-lua-runtime/luasrc/sys.lua": {
    "9": "local uci    = require \"luci.model.uci\"",
    "77": "local cur = uci.cursor()"
  },
  "luci/modules/luci-lua-runtime/luasrc/model/uci.lua": {
    "14": "-- The typical workflow for UCI is:  Get a cursor instance from the",
    "20": "module \"luci.model.uci\"",
    "41": "return util.ubus(\"uci\", cmd, args)",
    "63": "return \"/tmp/.uci\"",
    "181": "local _, err = util.ubus(\"uci\", \"confirm\", {",
    "202": "local _, err = util.ubus(\"uci\", \"rollback\", {"
  },
  "luci/modules/luci-lua-runtime/luasrc/sys/zoneinfo/tzdata.lua": {
    "194": "{ 'America/Tegucigalpa', 'CST6' },"
  },
  "luci/modules/luci-lua-runtime/src/contrib/lemon.c": {
    "1585": "/* Compute the follow set of every reducible configuration */"
  },
  "luci/modules/luci-mod-network/htdocs/luci-static/resources/tools/network.js": {
    "5": "'require uci';",
    "37": "uci.sections('network', 'device', function(ss) {",
    "56": "uci.sections('network', null, function(s) {",
    "320": "var ports = L.toArray(uci.get('network', section_id, 'ports'));",
    "360": "uci.set('network', section_id, 'ports', ports.length ? ports : null);",
    "483": "o.ucioption = 'name';",
    "504": "o.ucioption = 'ifname';",
    "567": "o.ucioption = 'name';",
    "596": "o.ucioption = 'ports';",
    "599": "var bridge_name = uci.get('network', section_id, 'name'),",
    "605": "var ifnames = L.toArray(uci.get('network', section_id, 'ports'));",
    "678": "o.ucioption = 'primary';",
    "986": "o.ucioption = 'ports';",
    "989": "var bridge_name = uci.get('network', section_id, 'name'),",
    "995": "var ifnames = L.toArray(uci.get('network', section_id, 'ports'));",
    "1119": "var sections = uci.sections('network', 'device'),",
    "1264": "var device = uci.get('network', s.section, 'name'),",
    "1268": "uci.sections('network', 'bridge-vlan', function(bvs) {",
    "1297": "var devname = uci.get('network', s.section, 'name');",
    "1298": "return (uci.get('network', section_id, 'device') == devname);",
    "1339": "var old_spec = L.toArray(uci.get('network', section_ids[i], 'ports')),",
    "1343": "uci.set('network', section_ids[i], 'ports', new_spec.length ? new_spec : null);",
    "1349": "var device = uci.get('network', s.section, 'name'),",
    "1358": "var vid = +uci.get('network', section_ids[i], 'vlan');",
    "1364": "section_id = uci.add('network', 'bridge-vlan');",
    "1365": "uci.set('network', section_id, 'device', device);",
    "1366": "uci.set('network', section_id, 'vlan', max_vlan_id + 1);",
    "1415": "if (uci.get('network', section_ids[i], 'vlan') == value)",
    "1429": "L.toArray(uci.get('network', s.section, 'ports')).forEach(function(port) {",
    "1433": "uci.sections('network', 'bridge-vlan', function(bvs) {",
    "1434": "if (uci.get('network', s.section, 'name') != bvs.device)"
  },
  "luci/modules/luci-mod-network/htdocs/luci-static/resources/view/network/dhcp.js": {
    "6": "'require uci';",
    "109": "return uci.load('dhcp').then(function() {",
    "110": "let sections = uci.sections('dhcp', 'dhcp'),",
    "245": "var leases = uci.sections('dhcp', 'host'),",
    "282": "uci.load('firewall')",
    "366": "var section = uci.get('dhcp', sections[i]),",
    "923": "Object.values(L.uci.sections('dhcp', 'dnsmasq')).forEach(function(val, index) {",
    "1071": "let value = uci.get('dhcp', section_id, 'hexdata') || '';",
    "1084": "uci.unset('dhcp', section, 'hexdata');",
    "1089": "uci.set('dhcp', section, this.option, encodedArr);",
    "1115": "let hexdata = uci.get('dhcp', section_id, 'hexdata') || '';",
    "1121": "let rrnum = uci.get('dhcp', section_id, 'rrnumber');",
    "1129": "uci.set('dhcp', section_id, 'hexdata', hex);",
    "1133": "let rrnum = uci.get('dhcp', section_id, 'rrnumber');",
    "1136": "let hexdata = uci.get('dhcp', section_id, 'hexdata');",
    "1188": "uci.sections('firewall', 'ipset', function(s) {",
    "1234": "uci.set('dhcp', section, 'name', value);",
    "1235": "uci.set('dhcp', section, 'dns', '1');",
    "1238": "uci.unset('dhcp', section, 'name');",
    "1239": "uci.unset('dhcp', section, 'dns');",
    "1250": "var macs = uci.get('dhcp', section, 'mac');",
    "1277": "var leases = uci.sections('dhcp', 'host');",
    "1339": "Object.values(L.uci.sections('dhcp', 'dnsmasq')).forEach(function(val, index) {"
  },
  "luci/modules/luci-mod-network/htdocs/luci-static/resources/view/network/diagnostics.js": {
    "6": "'require uci';",
    "64": "uci.load('luci')",
    "73": "dns_host = uci.get('luci', 'diag', 'dns') || 'openwrt.org',",
    "74": "ping_host = uci.get('luci', 'diag', 'ping') || 'openwrt.org',",
    "75": "route_host = uci.get('luci', 'diag', 'route') || 'openwrt.org';"
  },
  "luci/modules/luci-mod-network/htdocs/luci-static/resources/view/network/interfaces.js": {
    "7": "'require uci';",
    "63": "else if (!uci.get('network', ifc.getName()))",
    "280": "else if (ifc.getProtocol() || uci.get('network', ifc.getName()) == null) {",
    "328": "uci.changes()",
    "333": "return uci.sections('network', 'interface').filter(function(ns) {",
    "339": "return uci.sections('network', 'device').filter(function(ns) {",
    "345": "return uci.sections('network', 'interface').filter(function(ns) {",
    "356": "tasks.push(uci.callAdd('network', 'device', null, {",
    "365": "tasks.push(uci.callSet('network', ns['.name'], {",
    "396": "tasks.push(uci.callSet('network', ds['.name'], {",
    "403": "tasks.push(uci.callSet('network', ns['.name'], {",
    "457": "uci.load('system')",
    "504": "if (!dynamic && net && !uci.get('network', net.getName())) {",
    "519": "var protoval = uci.get('network', s.section, 'proto') || 'none',",
    "559": "o.ucioption = 'device';",
    "621": "ss.uciconfig = 'dhcp';",
    "631": "return (uci.get('dhcp', section_id, 'interface') == ifc.getName());",
    "642": "uci.add('dhcp', 'dhcp', section_id);",
    "643": "uci.set('dhcp', section_id, 'interface', section_id);",
    "646": "uci.set('dhcp', section_id, 'start', 100);",
    "647": "uci.set('dhcp', section_id, 'limit', 150);",
    "648": "uci.set('dhcp', section_id, 'leasetime', '12h');",
    "651": "uci.set('dhcp', section_id, 'ignore', 1);",
    "715": "var has_other_master = uci.sections('dhcp', 'dhcp').filter(function(s) {",
    "834": "var flags = L.toArray(uci.get('dhcp', section_id, 'ra_flags'));",
    "838": "var existing = L.toArray(uci.get('dhcp', section_id, 'ra_flags'));",
    "841": "uci.set('dhcp', section_id, 'ra_flags', [ 'none' ]);",
    "844": "uci.unset('dhcp', section_id, 'ra_flags');",
    "959": "for(var x of uci.get('system', 'ntp', 'server') || '') {",
    "965": "if(uci.get('system', 'ntp', 'enable_server')) {",
    "1157": "var type = uci.get('network', this.activeSection || this.addedSection, 'type'),",
    "1160": "uci.sections('network', 'bridge-vlan', function(bvs) {",
    "1162": "uci.remove('network', bvs['.name']);",
    "1181": "this.renderUCISection('_new_')",
    "1187": "name.datatype = 'uciname';",
    "1190": "if (uci.get('network', value) != null)",
    "1246": "var section_id = uci.add('network', 'interface', nameval);",
    "1339": "var sections = uci.sections('network', 'device'),",
    "1353": "s = m ? uci.get('network', m[1]) : null;",
    "1370": "section_id = uci.add('network', 'device');",
    "1372": "uci.set('network', section_id, 'name', m[1]);",
    "1373": "uci.set('network', section_id, 'type', (devtype != 'ethernet') ? devtype : null);",
    "1394": "name = m ? m[1] : uci.get('network', section_id, 'name');",
    "1400": "var isNew = (uci.get('network', s.section, 'name') == null),",
    "1407": "var name = uci.get('network', this.addedSection, 'name')",
    "1409": "uci.sections('network', 'bridge-vlan', function(bvs) {",
    "1411": "uci.remove('network', bvs['.name']);",
    "1416": "uci.remove('network', map.addedVLANs[i]);",
    "1419": "uci.remove('network', this.addedSection);",
    "1425": "var name = uci.get('network', section_id, 'name'),",
    "1426": "type = uci.get('network', section_id, 'type');",
    "1429": "uci.sections('network', 'bridge-vlan', function(bvs) {",
    "1431": "uci.remove('network', bvs['.name']);",
    "1440": "name = m ? m[1] : uci.get('network', section_id, 'name');",
    "1447": "cfg = uci.get('network', section_id),",
    "1448": "type = cfg ? (uci.get('network', section_id, 'type') || 'ethernet') : (dev ? dev.getType() : '');",
    "1535": "dev ? dev.getName() : (uci.get('network', section_id, 'name') || '?')",
    "1548": "val = uci.get('network', section_id, 'macaddr'),",
    "1560": "val = uci.get('network', section_id, 'mtu'),",
    "1596": "var steer_flow = uci.get('network', 'globals', 'steering_flows');",
    "1674": "var sections = uci.sections('network', 'atm-bridge'),",
    "1685": "var sid = uci.add('network', 'atm-bridge');",
    "1687": "uci.set('network', sid, 'unit', max_unit + 1);",
    "1688": "uci.set('network', sid, 'atmdev', 0);",
    "1689": "uci.set('network', sid, 'encaps', 'llc');",
    "1690": "uci.set('network', sid, 'payload', 'bridged');",
    "1691": "uci.set('network', sid, 'vci', 35);",
    "1692": "uci.set('network', sid, 'vpi', 8);"
  },
  "luci/modules/luci-mod-network/htdocs/luci-static/resources/view/network/routes.js": {
    "4": "'require uci';",
    "67": "var section_type = uci.get('network', section_id, '.type'),",
    "68": "target = uci.get('network', section_id, 'target'),",
    "69": "mask = uci.get('network', section_id, 'netmask'),",
    "77": "uci.set('network', section_id, 'target', formvalue);",
    "78": "uci.unset('network', section_id, 'netmask');"
  },
  "luci/modules/luci-mod-network/htdocs/luci-static/resources/view/network/switch.js": {
    "7": "'require uci';",
    "12": "var ports = L.toArray(uci.get('network', section_id, 'ports'));",
    "42": "var interfaces = uci.sections('network', 'interface');",
    "60": "uci.set('network', interfaces[i]['.name'], 'ifname', new_ifnames.join(' '));",
    "141": "var switchSections = uci.sections('network', 'switch');",
    "226": "var device = uci.get('network', section_id, 'device');",
    "234": "var vidA = feat.vid_option ? uci.get('network', a, feat.vid_option) : null,",
    "235": "vidB = feat.vid_option ? uci.get('network', b, feat.vid_option) : null;",
    "237": "vidA = +(vidA != null ? vidA : uci.get('network', a, 'vlan') || 9999);",
    "238": "vidB = +(vidB != null ? vidB : uci.get('network', b, 'vlan') || 9999);",
    "245": "var sections = uci.sections('network', 'switch_vlan'),",
    "246": "section_id = uci.add('network', 'switch_vlan'),",
    "264": "uci.set('network', section_id, 'device', this.device);",
    "265": "uci.set('network', section_id, 'vlan', max_vlan + 1);",
    "268": "uci.set('network', section_id, feat.vid_option, max_vid + 1);",
    "330": "uci.set('network', sid, feat.vlan4k_option, '1');",
    "332": "uci.set('network', section_id, 'ports', values.join(' '));",
    "338": "var value = feat.vid_option ? uci.get('network', section_id, feat.vid_option) : null;",
    "339": "return (value || uci.get('network', section_id, 'vlan'));"
  },
  "luci/modules/luci-mod-network/htdocs/luci-static/resources/view/network/wireless.js": {
    "8": "'require uci';",
    "131": "const disabled = (radioNet.get('disabled') == '1' || uci.get('wireless', radioNet.getWifiDeviceName(), 'disabled') == '1');",
    "231": "const radio = uci.get('wireless', id, 'device');",
    "232": "const disabled = (uci.get('wireless', id, 'disabled') == '1') ||",
    "233": "(uci.get('wireless', radio, 'disabled') == '1');",
    "236": "uci.unset('wireless', id, 'disabled');",
    "237": "uci.unset('wireless', radio, 'disabled');",
    "240": "uci.set('wireless', id, 'disabled', '1');",
    "243": "const wifi_ifaces = uci.sections('wireless', 'wifi-iface');",
    "251": "uci.set('wireless', radio, 'disabled', '1');",
    "262": "while (uci.get('wireless', sid))",
    "462": "const htval = uci.get('wireless', section_id, 'htmode');",
    "463": "const hwval = uci.get('wireless', section_id, 'hwmode');",
    "464": "const chval = uci.get('wireless', section_id, 'channel');",
    "465": "const bandval = uci.get('wireless', section_id, 'band');",
    "555": "uci.get('wireless', section_id, 'htmode'),",
    "556": "uci.get('wireless', section_id, 'hwmode') || uci.get('wireless', section_id, 'band'),",
    "557": "uci.get('wireless', section_id, 'channel')",
    "572": "uci.set('wireless', section_id, 'htmode', value[0] || null);",
    "575": "uci.set('wireless', section_id, 'band', value[1]) :",
    "576": "uci.set('wireless', section_id, 'hwmode', (value[1] == '2g') ? '11g' : '11a');",
    "578": "uci.set('wireless', section_id, 'channel', value[2]);",
    "783": "uci.changes(),",
    "784": "uci.load('wireless'),",
    "785": "uci.load('system'),",
    "791": "return uci.sections('wireless', 'wifi-iface').some(iface => iface['.anonymous']);",
    "795": "object: 'uci',",
    "808": "const wifiIfaces = uci.sections('wireless', 'wifi-iface');",
    "927": "uci.get('wireless', inst.getWifiDeviceName(), 'disabled') == '1');",
    "953": "const hwtype = uci.get('wireless', radioNet.getWifiDeviceName(), 'type');",
    "964": "uci.get('wireless', radioNet.getWifiDeviceName(), 'disabled') == 1);",
    "978": "o.ucisection = s.section;",
    "1158": "uci.set('wireless', section_id, 'mode', 'ap');",
    "1159": "uci.set('wireless', section_id, 'wds', '1');",
    "1163": "uci.set('wireless', section_id, 'mode', 'sta');",
    "1164": "uci.set('wireless', section_id, 'wds', '1');",
    "1168": "uci.set('wireless', section_id, 'mode', value);",
    "1169": "uci.unset('wireless', section_id, 'wds');",
    "1175": "const mode = uci.get('wireless', section_id, 'mode');",
    "1176": "const wds = uci.get('wireless', section_id, 'wds');",
    "1213": "const macaddr = uci.get('wireless', radioNet.getName(), 'macaddr');",
    "1261": "const v = String(uci.get('wireless', section_id, 'encryption'));",
    "1275": "uci.unset('wireless', section_id, 'key');",
    "1280": "uci.set('wireless', section_id, 'encryption', e);",
    "1303": "let v = String(uci.get('wireless', section_id, 'encryption'));",
    "1602": "const key = uci.get('wireless', section_id, 'key');",
    "1607": "uci.set('wireless', section_id, 'key', value);",
    "1608": "uci.unset('wireless', section_id, 'key1');",
    "1609": "uci.unset('wireless', section_id, 'key2');",
    "1610": "uci.unset('wireless', section_id, 'key3');",
    "1611": "uci.unset('wireless', section_id, 'key4');",
    "1624": "const slot = +uci.get('wireless', section_id, 'key');",
    "1629": "uci.set('wireless', section_id, 'key', value);",
    "1643": "uci.set('wireless', section_id, this.option, value);",
    "1738": "const tz = uci.get('system', '@system[0]', 'timezone');",
    "2112": "const wifi_sections = uci.sections('wireless', 'wifi-iface');",
    "2117": "uci.remove('wireless', ws['.name']);",
    "2120": "if (uci.get('wireless', radioDev.getName(), 'disabled') == '1') {",
    "2123": "uci.set('wireless', ws['.name'], 'disabled', '1');",
    "2125": "uci.unset('wireless', radioDev.getName(), 'disabled');",
    "2133": "uci.set('wireless', radioDev.getName(), 'htmode', 'VHT'+w);",
    "2140": "uci.set('wireless', radioDev.getName(), 'htmode', 'HT'+w);",
    "2143": "uci.remove('wireless', radioDev.getName(), 'htmode');",
    "2146": "uci.set('wireless', radioDev.getName(), 'channel', bss.channel);",
    "2150": "uci.add('wireless', 'wifi-iface', section_id);",
    "2151": "uci.set('wireless', section_id, 'device', radioDev.getName());",
    "2152": "uci.set('wireless', section_id, 'mode', (bss.mode == 'Ad-Hoc') ? 'adhoc' : 'sta');",
    "2153": "uci.set('wireless', section_id, 'network', nameval);",
    "2156": "uci.set('wireless', section_id, 'ssid', bss.ssid);",
    "2159": "uci.set('wireless', section_id, 'bssid', bss.bssid);",
    "2162": "uci.set('wireless', section_id, 'bssid', bss.bssid);",
    "2166": "uci.set('wireless', section_id, 'ssid', ssidval);",
    "2169": "uci.set('wireless', section_id, 'encryption', 'sae');",
    "2170": "uci.set('wireless', section_id, 'key', passval);",
    "2175": "uci.set('wireless', section_id, 'encryption', 'psk2');",
    "2179": "uci.set('wireless', section_id, 'encryption', 'psk');",
    "2184": "uci.set('wireless', section_id, 'key', passval);",
    "2187": "uci.set('wireless', section_id, 'encryption', 'wep-open');",
    "2188": "uci.set('wireless', section_id, 'key', '1');",
    "2189": "uci.set('wireless', section_id, 'key1', passval);",
    "2192": "uci.set('wireless', section_id, 'encryption', 'none');",
    "2225": "const s = uci.get('network', name);",
    "2236": "this.renderUCISection('_new_')",
    "2250": "name.datatype = 'uciname';",
    "2296": "const section_id = next_free_sid(uci.sections('wireless', 'wifi-iface').length);",
    "2298": "uci.unset('wireless', radioDev.getName(), 'disabled');",
    "2300": "uci.add('wireless', 'wifi-iface', section_id);",
    "2301": "uci.set('wireless', section_id, 'device', radioDev.getName());",
    "2302": "uci.set('wireless', section_id, 'mode', 'ap');",
    "2303": "uci.set('wireless', section_id, 'ssid', 'OpenWrt');",
    "2304": "uci.set('wireless', section_id, 'encryption', 'none');"
  },
  "luci/modules/luci-mod-rpc/luasrc/controller/rpc.lua": {
    "49": "entry({\"rpc\", \"uci\"}, call(\"rpc_uci\"))",
    "111": "function rpc_uci()",
    "112": "if not pcall(require, \"luci.model.uci\") then",
    "116": "local uci     = require \"luci.jsonrpcbind.uci\"",
    "122": "ltn12.pump.all(jsonrpc.handle(uci, http.source()), http.write)"
  },
  "luci/modules/luci-mod-rpc/luasrc/jsonrpcbind/uci.lua": {
    "5": "local uci   = require \"luci.model.uci\".cursor()",
    "6": "local ucis  = require \"luci.model.uci\".cursor_state()",
    "10": "module \"luci.jsonrpcbind.uci\"",
    "14": "uci:load(config)",
    "15": "local stat = uci:add(config, ...)",
    "16": "return uci:save(config) and stat",
    "20": "return uci:apply(config)",
    "24": "return uci:changes(...)",
    "28": "return uci:load(config) and uci:commit(config)",
    "32": "uci:load(config)",
    "33": "return uci:delete(config, ...) and uci:save(config)",
    "37": "uci:load(config)",
    "38": "return uci:delete_all(config, ...) and uci:save(config)",
    "42": "uci:load(config)",
    "45": "return uci:foreach(config, stype, function(section)",
    "51": "uci:load(config)",
    "52": "return uci:get(config, ...)",
    "56": "uci:load(config)",
    "57": "return uci:get_all(config, ...)",
    "61": "ucis:load(config)",
    "62": "return ucis:get(config, ...)",
    "66": "return uci:load(config) and uci:revert(config)",
    "70": "uci:load(config)",
    "71": "return uci:section(config, ...) and uci:save(config)",
    "75": "uci:load(config)",
    "76": "return uci:set(config, ...) and uci:save(config)",
    "80": "uci:load(config)",
    "81": "return uci:tset(config, ...) and uci:save(config)"
  },
  "luci/modules/luci-mod-status/htdocs/luci-static/resources/view/status/include/29_ports.js": {
    "5": "'require uci';",
    "48": "var bridge_vlans = uci.sections('network', 'bridge-vlan'),",
    "49": "vlan_devices = uci.sections('network', 'device'),",
    "50": "interfaces = uci.sections('network', 'interface'),",
    "311": "uci.load('network')"
  },
  "luci/modules/luci-mod-status/htdocs/luci-static/resources/view/status/include/40_dhcp.js": {
    "4": "'require uci';",
    "24": "L.resolveDefault(uci.load('dhcp'))",
    "33": "var cfg = uci.add('dhcp', 'host');",
    "34": "uci.set('dhcp', cfg, 'name', lease.hostname);",
    "35": "uci.set('dhcp', cfg, 'ip', lease.ipaddr);",
    "36": "uci.set('dhcp', cfg, 'mac', [lease.macaddr.toUpperCase()]);",
    "38": "return uci.save()",
    "48": "var cfg = uci.add('dhcp', 'host'),",
    "51": "uci.set('dhcp', cfg, 'name', lease.hostname);",
    "52": "uci.set('dhcp', cfg, 'duid', lease.duid.toUpperCase());",
    "53": "uci.set('dhcp', cfg, 'mac', [lease.macaddr]);",
    "55": "uci.set('dhcp', cfg, 'hostid', (ip6arr[6] * 0xFFFF + ip6arr[7]).toString(16));",
    "57": "return uci.save()",
    "66": "hosts = uci.sections('dhcp', 'host'),"
  },
  "luci/modules/luci-mod-status/htdocs/luci-static/resources/view/status/include/60_wifi.js": {
    "5": "'require uci';",
    "69": "uci.set('wireless', wifinet.sid, 'maclist', wifinet.maclist);",
    "71": "return uci.save()",
    "200": "L.hasSystemFeature('wifi') ? L.resolveDefault(uci.load('wireless')) : L.resolveDefault(),",
    "211": "if (hasWPS && uci.get('wireless', radios_networks_hints[i].sid, 'wps_pushbutton') == '1') {",
    "257": "const macfilter = uci.get('wireless', networks[i].sid, 'macfilter');",
    "261": "networks[i].maclist = L.toArray(uci.get('wireless', networks[i].sid, 'maclist'));"
  },
  "luci/modules/luci-mod-system/htdocs/luci-static/resources/view/system/leds.js": {
    "3": "'require uci';",
    "96": "var trigger = uci.get('system', section_id, 'trigger');",
    "117": "if (opts[optname].ucioption != this.ucioption)",
    "132": "if (!opts[optname].ucioption || optname == opts[optname].ucioption)"
  },
  "luci/modules/luci-mod-system/htdocs/luci-static/resources/view/system/mounts.js": {
    "5": "'require uci';",
    "30": "var v = (uci.get('fstab', section_id, 'uuid') || '').toLowerCase(),",
    "44": "v = uci.get('fstab', section_id, 'label');",
    "58": "v = uci.get('fstab', section_id, 'device');",
    "76": ".then(L.bind(uci.unload, uci, 'fstab'))",
    "86": ".then(L.bind(uci.unload, uci, 'fstab'))",
    "92": ".then(L.bind(uci.unload, uci, 'fstab'))",
    "107": "uci.load('fstab')",
    "141": "if (!uci.sections('fstab', 'global').length)",
    "142": "uci.add('fstab', 'global');"
  },
  "luci/modules/luci-mod-system/htdocs/luci-static/resources/view/system/reboot.js": {
    "5": "'require uci';",
    "15": "return uci.changes();"
  },
  "luci/modules/luci-mod-system/htdocs/luci-static/resources/view/system/system.js": {
    "5": "'require uci';",
    "101": "uci.load('luci'),",
    "102": "uci.load('system')",
    "154": "uci.set('system', section_id, 'zonename', formvalue);",
    "155": "uci.set('system', section_id, 'timezone', tz);",
    "226": "o.uciconfig = 'luci';",
    "227": "o.ucisection = 'main';",
    "228": "o.ucioption = 'lang';",
    "231": "var l = Object.assign({ en: 'English' }, uci.get('luci', 'languages')),",
    "238": "o.uciconfig = 'luci';",
    "239": "o.ucisection = 'main';",
    "240": "o.ucioption = 'mediaurlbase';",
    "242": "var k = Object.keys(uci.get('luci', 'themes') || {}).sort();",
    "245": "o.value(uci.get('luci', 'themes', k[i]), k[i]);",
    "259": "o.ucisection = 'ntp';",
    "264": "if (ntpd_enabled && !uci.get('system', 'ntp')) {",
    "265": "uci.add('system', 'timeserver', 'ntp');",
    "266": "uci.set('system', 'ntp', 'server', default_servers);",
    "270": "uci.set('system', 'ntp', 'enabled', 0);",
    "272": "uci.unset('system', 'ntp', 'enabled');",
    "278": "uci.get('system', 'ntp') != null &&",
    "279": "uci.get('system', 'ntp', 'enabled') != 0) ? '1' : '0';",
    "283": "o.ucisection = 'ntp';",
    "289": "o.ucisection = 'ntp';",
    "296": "o.ucisection = 'ntp';",
    "303": "o.ucisection = 'ntp';",
    "306": "return uci.get('system', 'ntp', 'server');"
  },
  "luci/modules/luci-mod-system/htdocs/luci-static/resources/view/system/led-trigger/netdev.js": {
    "15": "o.ucioption = 'dev';"
  },
  "luci/protocols/luci-proto-3g/htdocs/luci-static/resources/protocol/3g.js": {
    "3": "'require uci';",
    "36": "uci.set('network', section_id, 'keepalive', '%d %d'.format(f, i));",
    "38": "uci.unset('network', section_id, 'keepalive');",
    "74": "o.ucioption = 'device';",
    "119": "o.ucioption = 'ipv6';",
    "136": "var v = uci.get('network', section_id, 'keepalive');",
    "149": "var v = uci.get('network', section_id, 'keepalive');"
  },
  "luci/protocols/luci-proto-batman-adv/htdocs/luci-static/resources/protocol/batadv_hardif.js": {
    "2": "'require uci';",
    "43": "var uciInterfaces = uci.sections('network', 'interface');",
    "45": "for (var i = 0; i < uciInterfaces.length; i++)",
    "47": "if (uciInterfaces[i].proto == 'batadv')",
    "49": "var x=uciInterfaces[i]['.name'];"
  },
  "luci/protocols/luci-proto-batman-adv/htdocs/luci-static/resources/protocol/batadv.js": {
    "52": "o.ucioption = 'aggregated_ogms';",
    "62": "o.ucioption = 'ap_isolation';",
    "67": "o.ucioption = 'bonding';",
    "72": "o.ucioption = 'bridge_loop_avoidance';",
    "77": "o.ucioption = 'distributed_arp_table';",
    "82": "o.ucioption = 'fragmentation';",
    "94": "o.ucioption = 'hop_penalty';",
    "101": "o.ucioption = 'multicast_mode';",
    "105": "_('When enabled network coding increases the WiFi throughput by combining multiple frames into a single frame, thus reducing the needed air time.'));",
    "106": "o.ucioption = 'network_coding';"
  },
  "luci/protocols/luci-proto-external/htdocs/luci-static/resources/protocol/external.js": {
    "30": "o.ucioption = 'device';",
    "35": "o.ucioption = 'delay';",
    "42": "o.ucioption = 'searchdomain'"
  },
  "luci/protocols/luci-proto-ipv6/htdocs/luci-static/resources/protocol/6in4.js": {
    "2": "'require uci';",
    "66": "return !isNaN(+uci.get('network', section_id, 'tunnelid')) ? this.enabled : this.disabled;"
  },
  "luci/protocols/luci-proto-mbim/htdocs/luci-static/resources/protocol/mbim.js": {
    "55": "o.ucioption = 'device';",
    "102": "o.ucioption = 'ipv6';"
  },
  "luci/protocols/luci-proto-modemmanager/htdocs/luci-static/resources/protocol/modemmanager.js": {
    "52": "o.ucioption = 'device';"
  },
  "luci/protocols/luci-proto-ncm/htdocs/luci-static/resources/protocol/ncm.js": {
    "66": "o.ucioption = 'device';",
    "112": "o.ucioption = 'ipv6';"
  },
  "luci/protocols/luci-proto-nebula/htdocs/luci-static/resources/protocol/nebula.js": {
    "3": "'require uci';",
    "46": "uci.sections('network', 'nebula_%s'.format(this.sid), function (s) {",
    "47": "uci.remove('network', s['.name']);"
  },
  "luci/protocols/luci-proto-ppp/htdocs/luci-static/resources/protocol/l2tp.js": {
    "2": "'require uci';",
    "50": "o.ucioption = 'ipv6';"
  },
  "luci/protocols/luci-proto-ppp/htdocs/luci-static/resources/protocol/ppp.js": {
    "3": "'require uci';",
    "36": "uci.set('network', section_id, 'keepalive', '%d %d'.format(f, i));",
    "38": "uci.unset('network', section_id, 'keepalive');",
    "74": "o.ucioption = 'device';",
    "95": "o.ucioption = 'ipv6';",
    "108": "var v = uci.get('network', section_id, 'keepalive');",
    "121": "var v = uci.get('network', section_id, 'keepalive');"
  },
  "luci/protocols/luci-proto-ppp/htdocs/luci-static/resources/protocol/pppoa.js": {
    "2": "'require uci';",
    "21": "uci.set('network', section_id, 'keepalive', '%d %d'.format(f, i));",
    "23": "uci.unset('network', section_id, 'keepalive');",
    "81": "o.ucioption = 'ipv6';",
    "94": "var v = uci.get('network', section_id, 'keepalive');",
    "107": "var v = uci.get('network', section_id, 'keepalive');"
  },
  "luci/protocols/luci-proto-ppp/htdocs/luci-static/resources/protocol/pppoe.js": {
    "2": "'require uci';",
    "21": "uci.set('network', section_id, 'keepalive', '%d %d'.format(f, i));",
    "23": "uci.unset('network', section_id, 'keepalive');",
    "55": "o.ucioption = 'ipv6';",
    "68": "var v = uci.get('network', section_id, 'keepalive');",
    "81": "var v = uci.get('network', section_id, 'keepalive');"
  },
  "luci/protocols/luci-proto-ppp/htdocs/luci-static/resources/protocol/pptp.js": {
    "2": "'require uci';",
    "21": "uci.set('network', section_id, 'keepalive', '%d %d'.format(f, i));",
    "23": "uci.unset('network', section_id, 'keepalive');",
    "68": "o.ucioption = 'ipv6';",
    "81": "var v = uci.get('network', section_id, 'keepalive');",
    "94": "var v = uci.get('network', section_id, 'keepalive');"
  },
  "luci/protocols/luci-proto-pppossh/htdocs/luci-static/resources/protocol/pppossh.js": {
    "2": "'require uci';",
    "21": "uci.set('network', section_id, 'keepalive', '%d %d'.format(f, i));",
    "23": "uci.unset('network', section_id, 'keepalive');",
    "94": "o.ucioption = 'ipv6';",
    "104": "var v = uci.get('network', section_id, 'keepalive');",
    "117": "var v = uci.get('network', section_id, 'keepalive');"
  },
  "luci/protocols/luci-proto-qmi/htdocs/luci-static/resources/protocol/qmi.js": {
    "58": "o.ucioption = 'device';",
    "109": "o.ucioption = 'ipv6';"
  },
  "luci/protocols/luci-proto-relay/htdocs/luci-static/resources/protocol/relay.js": {
    "2": "'require uci';",
    "55": "var ipaddr = this.network ? L.toArray(uci.get('network', this.network.getName(), 'ipaddr'))[0] : null;",
    "100": "var networkNames = L.toArray(uci.get('network', this.sid, 'network')),",
    "101": "deviceNames = L.toArray(uci.get('network', this.sid, 'ifname')),",
    "132": "var networkNames = L.toArray(uci.get('network', this.sid, 'network')),"
  },
  "luci/protocols/luci-proto-sstp/htdocs/luci-static/resources/protocol/sstp.js": {
    "56": "o.ucioption = 'ipv6';"
  },
  "luci/protocols/luci-proto-vxlan/htdocs/luci-static/resources/protocol/vxlan.js": {
    "5": "'require uci';",
    "62": "const min = uci.get('network', section_id, 'srcportmin');",
    "63": "const max = uci.get('network', section_id, 'srcportmax');",
    "71": "uci.set('network', section_id, 'srcportmin', ports[0]);",
    "72": "uci.set('network', section_id, 'srcportmax', ports[1]);",
    "162": "return uci.set('network', section_id, 'tos', value);",
    "165": "const value = uci.get('network', section_id, 'tos');",
    "192": "let peer = uci.get('network', section_id);",
    "219": "uci.set('network', section_id, 'vxlan', s.section);"
  },
  "luci/protocols/luci-proto-vxlan/htdocs/luci-static/resources/protocol/vxlan6.js": {
    "5": "'require uci';",
    "62": "const min = uci.get('network', section_id, 'srcportmin');",
    "63": "const max = uci.get('network', section_id, 'srcportmax');",
    "71": "uci.set('network', section_id, 'srcportmin', ports[0]);",
    "72": "uci.set('network', section_id, 'srcportmax', ports[1]);",
    "162": "return uci.set('network', section_id, 'tos', value);",
    "165": "const value = uci.get('network', section_id, 'tos');",
    "192": "let peer = uci.get('network', section_id);",
    "219": "uci.set('network', section_id, 'vxlan', s.section);"
  },
  "luci/protocols/luci-proto-wireguard/htdocs/luci-static/resources/protocol/wireguard.js": {
    "5": "'require uci';",
    "149": "var privKey = s.formvalue(section_id, 'private_key') || uci.get('network', section_id, 'private_key');",
    "358": "var sid = uci.add('network', 'wireguard_' + s.section);",
    "360": "uci.sections('network', 'wireguard_' + s.section, function(peer) {",
    "362": "uci.remove('network', peer['.name']);",
    "365": "uci.set('network', sid, 'description', comment || _('Imported peer configuration'));",
    "366": "uci.set('network', sid, 'public_key', pconf.peer_publickey);",
    "367": "uci.set('network', sid, 'preshared_key', pconf.peer_presharedkey);",
    "368": "uci.set('network', sid, 'allowed_ips', pconf.peer_allowedips);",
    "369": "uci.set('network', sid, 'persistent_keepalive', pconf.peer_persistentkeepalive);",
    "372": "uci.set('network', sid, 'endpoint_host', pconf.peer_endpoint[0]);",
    "373": "uci.set('network', sid, 'endpoint_port', pconf.peer_endpoint[1]);",
    "384": "var sid = uci.add('network', 'wireguard_' + s.section);",
    "387": "uci.sections('network', 'wireguard_' + s.section, function(peer) {",
    "389": "uci.remove('network', peer['.name']);",
    "392": "uci.set('network', sid, 'description', comment || _('Imported peer configuration'));",
    "393": "uci.set('network', sid, 'public_key', keypair.pub);",
    "394": "uci.set('network', sid, 'private_key', keypair.priv);",
    "400": "uci.set('network', sid, 'preshared_key', pconf.peer_presharedkey);",
    "401": "uci.set('network', sid, 'allowed_ips', pconf.peer_allowedips);",
    "402": "uci.set('network', sid, 'persistent_keepalive', pconf.peer_persistentkeepalive);",
    "722": "L.resolveDefault(uci.load('ddns')),",
    "723": "L.resolveDefault(uci.load('system')),",
    "728": "uci.sections('ddns', 'service', function(s) {",
    "733": "uci.sections('system', 'system', function(s) {",
    "884": "uci.sections('network', 'wireguard_%s'.format(this.sid), function(s) {",
    "885": "uci.remove('network', s['.name']);"
  },
  "luci/protocols/luci-proto-xfrm/htdocs/luci-static/resources/protocol/xfrm.js": {
    "2": "'require uci';"
  },
  "luci/protocols/luci-proto-yggdrasil/htdocs/luci-static/resources/protocol/yggdrasil.js": {
    "6": "'require uci';",
    "384": "uci.sections('network', 'yggdrasil_%s_interface'.format(this.sid), function(s) {",
    "385": "uci.remove('network', s['.name']);",
    "387": "uci.sections('network', 'yggdrasil_%s_peer'.format(this.sid), function(s) {",
    "388": "uci.remove('network', s['.name']);"
  }
}
